{"version":3,"file":"index.js","sources":["../src/editor-event-listener.tsx","../src/internal-utils/debug.ts","../src/internal-utils/values.ts","../src/internal-utils/slate-utils.ts","../src/internal-utils/event-position.ts","../src/internal-utils/selection.ts","../src/internal-utils/to-slate-range.ts","../src/internal-utils/weakMaps.ts","../src/editor/editor-actor-context.ts","../src/editor/components/drop-indicator.tsx","../src/editor/components/render-default-object.tsx","../src/internal-utils/drag-selection.ts","../src/priority/priority.types.ts","../src/priority/priority.core.ts","../src/behaviors/behavior.core.block-element.ts","../src/editor/components/use-core-block-element-behaviors.ts","../src/editor/components/render-block-object.tsx","../src/editor/components/render-inline-object.tsx","../src/editor/components/render-text-block.tsx","../src/editor/components/render-element.tsx","../src/editor/editor-selector.ts","../src/editor/components/render-span.tsx","../src/editor/components/render-leaf.tsx","../src/editor/components/render-text.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/internal-utils/is-hotkey.ts","../src/editor/plugins/createWithHotKeys.ts","../src/internal-utils/move-range-by-operation.ts","../src/editor/range-decorations-machine.ts","../src/editor/relay-actor-context.ts","../src/editor/Editable.tsx","../src/internal-utils/stop-actor.ts","../src/converters/converter.json.ts","../src/converters/converter.portable-text.ts","../src/converters/converter.text-html.ts","../src/converters/converter.text-plain.ts","../src/converters/converters.core.ts","../src/internal-utils/schema.ts","../src/internal-utils/build-index-maps.ts","../src/internal-utils/create-placeholder-block.ts","../src/internal-utils/sibling-utils.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withUndoRedo.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../src/editor/with-undo-step.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/operations/behavior.operation.annotation.add.ts","../src/operations/behavior.operation.annotation.remove.ts","../src/operations/behavior.operation.block.set.ts","../src/operations/behavior.operation.block.unset.ts","../src/operations/behavior.operation.child.set.ts","../src/operations/behavior.operation.child.unset.ts","../src/operations/behavior.operation.decorator.add.ts","../src/operations/behavior.operation.delete.ts","../src/operations/behavior.operation.insert.block.ts","../src/operations/behavior.operation.insert.child.ts","../src/operations/behavior.operation.insert.text.ts","../src/operations/behavior.operation.move.backward.ts","../src/operations/behavior.operation.move.block.ts","../src/operations/behavior.operation.move.forward.ts","../src/operations/behavior.operation.select.ts","../src/operations/behavior.operations.ts","../src/editor/with-performing-behavior-operation.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/internal-utils/operation-to-patches.ts","../src/internal-utils/withoutPatching.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/slate-plugin.update-selection.ts","../src/internal-utils/portable-text-node.ts","../src/internal-utils/apply-operation-to-portable-text.ts","../src/editor/plugins/slate-plugin.update-value.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/editor/editor-dom.ts","../src/behaviors/behavior.core.annotations.ts","../src/keyboard-shortcuts/default-keyboard-shortcuts.ts","../src/behaviors/behavior.core.block-objects.ts","../src/behaviors/behavior.core.decorators.ts","../src/internal-utils/compound-client-rect.ts","../src/behaviors/behavior.core.dnd.ts","../src/behaviors/behavior.core.insert.ts","../src/behaviors/behavior.core.insert-break.ts","../src/utils/util.at-the-beginning-of-block.ts","../src/behaviors/behavior.core.lists.ts","../src/behaviors/behavior.core.ts","../src/editor/without-normalizing-conditional.ts","../src/behaviors/behavior.abstract.annotation.ts","../src/behaviors/behavior.abstract.decorator.ts","../src/behaviors/behavior.abstract.delete.ts","../src/behaviors/behavior.abstract.deserialize.ts","../src/behaviors/behavior.abstract.insert.ts","../src/behaviors/behavior.abstract.keyboard.ts","../src/behaviors/behavior.abstract.list-item.ts","../src/behaviors/behavior.abstract.move.ts","../src/behaviors/behavior.abstract.select.ts","../src/behaviors/behavior.abstract.serialize.ts","../src/behaviors/behavior.abstract.split.ts","../src/behaviors/behavior.abstract.style.ts","../src/behaviors/behavior.abstract.ts","../src/behaviors/behavior.types.event.ts","../src/behaviors/behavior.perform-event.ts","../src/priority/priority.sort.ts","../src/editor/editor-snapshot.ts","../src/editor/editor-machine.ts","../src/editor/mutation-machine.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/relay-machine.ts","../src/internal-utils/validateValue.ts","../src/editor/sync-machine.ts","../src/editor/create-editor.ts","../src/editor/event-to-change.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/editor-provider.tsx","../src/editor/hooks/usePortableTextEditorSelection.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const subscription = editor.on('*', props.on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, props.on])\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [focusBlock] = getFocusBlock({editor})\n\n    if (!focusBlock) {\n      return [undefined, undefined]\n    }\n\n    if (!editor.isTextBlock(focusBlock)) {\n      return [undefined, undefined]\n    }\n\n    const [node, path] = Editor.node(\n      editor,\n      editor.selection.focus.path.slice(0, 2),\n    )\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const eventNode = getEventNode({slateEditor, event})\n\n  if (!eventNode) {\n    return undefined\n  }\n\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode,\n  })\n  const eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event,\n  })\n  const eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (\n    eventBlock &&\n    eventPositionBlock &&\n    !eventSelection &&\n    !Editor.isEditor(eventNode)\n  ) {\n    // If we for some reason can't find the event selection, then we default to\n    // selecting the entire block that the event originates from.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!eventPositionBlock || !eventSelection) {\n    return undefined\n  }\n\n  const eventSelectionFocusBlockKey = getBlockKeyFromSelectionPoint(\n    eventSelection.focus,\n  )\n\n  if (eventSelectionFocusBlockKey === undefined) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(eventSelection) &&\n    eventBlock &&\n    eventSelectionFocusBlockKey !== eventBlock._key\n  ) {\n    // If the event block and event selection somehow don't match, then the\n    // event block takes precedence.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: eventPositionBlock,\n    isEditor: Editor.isEditor(eventNode),\n    selection: eventSelection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {Path, Range} from 'slate'\nimport type {EditorContext, EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\n\nexport function toSlateRange(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value' | 'selection'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n): Range | null {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (\n    isEqualSelectionPoints(\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.focus,\n    )\n  ) {\n    const anchorPoint = toSlateSelectionPoint(\n      snapshot,\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.backward ? 'forward' : 'backward',\n    )\n\n    if (!anchorPoint) {\n      return null\n    }\n\n    return {\n      anchor: anchorPoint,\n      focus: anchorPoint,\n    }\n  }\n\n  const anchorPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.anchor,\n    snapshot.context.selection.backward ? 'forward' : 'backward',\n  )\n  const focusPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.focus,\n    snapshot.context.selection.backward ? 'backward' : 'forward',\n  )\n\n  if (!anchorPoint || !focusPoint) {\n    return null\n  }\n\n  return {\n    anchor: anchorPoint,\n    focus: focusPoint,\n  }\n}\n\nfunction toSlateSelectionPoint(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n  selectionPoint: EditorSelectionPoint,\n  direction: 'forward' | 'backward',\n):\n  | {\n      path: Path\n      offset: number\n    }\n  | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey) {\n    return undefined\n  }\n\n  const blockIndex = snapshot.blockIndexMap.get(blockKey)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  const block = snapshot.context.value.at(blockIndex)\n\n  if (!block) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, block)) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let childKey = getChildKeyFromSelectionPoint({\n    path: selectionPoint.path,\n    offset: 0,\n  })\n\n  // If the block is a text block, but there is no child key in the selection\n  // point path, then we can try to find a span selection point by the offset.\n  const spanSelectionPoint = !childKey\n    ? blockOffsetToSpanSelectionPoint({\n        context: {\n          schema: snapshot.context.schema,\n          value: [block],\n        },\n        blockOffset: {\n          path: [{_key: blockKey}],\n          offset: selectionPoint.offset,\n        },\n        direction,\n      })\n    : undefined\n\n  childKey = spanSelectionPoint\n    ? getChildKeyFromSelectionPoint(spanSelectionPoint)\n    : childKey\n\n  // If we still don't have a child key, then we have to resort to selecting\n  // the first child of the block (which by Slate convention is a span).\n  if (!childKey) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset\n  let childPath: Array<number> = []\n  let childIndex = -1\n  let pathChild: PortableTextSpan | PortableTextObject | undefined\n\n  for (const child of block.children) {\n    childIndex++\n    if (child._key === childKey) {\n      pathChild = child\n      if (isSpan(snapshot.context, child)) {\n        childPath = [childIndex]\n      } else {\n        childPath = [childIndex, 0]\n        offset = 0\n      }\n      break\n    }\n  }\n\n  // If we for some unforeseen reason didn't manage to produce a child path,\n  // then we have to resort to selecting the first child of the block (which\n  // by Slate convention is a span).\n  if (childPath.length === 0) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: [blockIndex].concat(childPath),\n    offset: isSpan(snapshot.context, pathChild)\n      ? Math.min(pathChild.text.length, offset)\n      : offset,\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import {getDragSelection} from '../internal-utils/drag-selection'\nimport type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = event.dragOrigin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const dragSelection = getDragSelection({\n            eventSelection: dragOrigin.selection,\n            snapshot,\n          })\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject | undefined\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  schema: EditorSchema\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = props.legacySchema.blockObjects.find(\n    (schemaType) => schemaType.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type,\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          <RenderBlock\n            renderBlock={props.renderBlock}\n            editorElementRef={blockObjectRef}\n            focused={focused}\n            path={[{_key: props.element._key}]}\n            schemaType={legacySchemaType}\n            selected={selected}\n            type={legacySchemaType}\n            value={blockObject}\n          >\n            <RenderDefaultBlockObject blockObject={blockObject} />\n          </RenderBlock>\n        ) : (\n          <RenderDefaultBlockObject blockObject={blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nfunction RenderBlock({\n  renderBlock,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  type,\n  value,\n}: {\n  renderBlock: RenderBlockFunction\n} & BlockRenderProps) {\n  return renderBlock({\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    type,\n    value,\n  })\n}\n","import {useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {\n  useSelected,\n  useSlateSelector,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {\n  BlockChildRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderChildFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n  schema: EditorSchema\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  const legacySchemaType = props.legacySchema.inlineObjects.find(\n    (inlineObject) => inlineObject.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  const inlineObject = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...('value' in props.element && typeof props.element.value === 'object'\n      ? props.element.value\n      : {}),\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={inlineObject._key}\n      data-child-name={inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          <RenderChild\n            renderChild={props.renderChild}\n            annotations={[]}\n            editorElementRef={inlineObjectRef}\n            selected={selected}\n            focused={focused}\n            path={[{_key: block._key}, 'children', {_key: props.element._key}]}\n            schemaType={legacySchemaType}\n            value={inlineObject}\n            type={legacySchemaType}\n          >\n            <RenderDefaultInlineObject inlineObject={inlineObject} />\n          </RenderChild>\n        ) : (\n          <RenderDefaultInlineObject inlineObject={inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n\nfunction RenderChild({\n  renderChild,\n  annotations,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderChild: RenderChildFunction\n} & BlockChildRenderProps) {\n  return renderChild({\n    annotations,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  BlockListItemRenderProps,\n  BlockRenderProps,\n  BlockStyleRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const listIndex = useSlateSelector((editor) =>\n    editor.listIndexMap.get(props.textBlock._key),\n  )\n\n  let children = props.children\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? props.legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = (\n        <RenderStyle\n          renderStyle={props.renderStyle}\n          block={props.textBlock}\n          editorElementRef={blockRef}\n          focused={focused}\n          path={[{_key: props.textBlock._key}]}\n          schemaType={legacyStyleSchemaType}\n          selected={selected}\n          value={props.textBlock.style}\n        >\n          {children}\n        </RenderStyle>\n      )\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = (\n        <RenderListItem\n          renderListItem={props.renderListItem}\n          block={props.textBlock}\n          editorElementRef={blockRef}\n          focused={focused}\n          level={props.textBlock.level ?? 1}\n          path={[{_key: props.textBlock._key}]}\n          selected={selected}\n          value={props.textBlock.listItem}\n          schemaType={legacyListItemSchemaType}\n        >\n          {children}\n        </RenderListItem>\n      )\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n      {...(listIndex !== undefined\n        ? {\n            'data-list-index': listIndex,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock ? (\n          <RenderBlock\n            renderBlock={props.renderBlock}\n            editorElementRef={blockRef}\n            focused={focused}\n            level={props.textBlock.level}\n            listItem={props.textBlock.listItem}\n            path={[{_key: props.textBlock._key}]}\n            selected={selected}\n            schemaType={props.legacySchema.block}\n            style={props.textBlock.style}\n            type={props.legacySchema.block}\n            value={props.textBlock}\n          >\n            {children}\n          </RenderBlock>\n        ) : (\n          children\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nfunction RenderBlock({\n  renderBlock,\n  children,\n  editorElementRef,\n  focused,\n  level,\n  listItem,\n  path,\n  selected,\n  style,\n  schemaType,\n  type,\n  value,\n}: {\n  renderBlock: RenderBlockFunction\n} & BlockRenderProps) {\n  return renderBlock({\n    children,\n    editorElementRef,\n    focused,\n    level,\n    listItem,\n    path,\n    selected,\n    style,\n    schemaType,\n    type,\n    value,\n  })\n}\n\nfunction RenderListItem({\n  renderListItem,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  level,\n  path,\n  schemaType,\n  selected,\n  value,\n}: {\n  renderListItem: RenderListItemFunction\n} & BlockListItemRenderProps) {\n  return renderListItem({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    level,\n    path,\n    schemaType,\n    selected,\n    value,\n  })\n}\n\nfunction RenderStyle({\n  renderStyle,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n}: {\n  renderStyle: RenderStyleFunction\n} & BlockStyleRenderProps) {\n  return renderStyle({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n  })\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport {useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const slateStatic = useSlateStatic()\n\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n        schema={schema}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const blockIndex = slateStatic.blockIndexMap.get(props.element._key)\n  const block =\n    blockIndex !== undefined ? slateStatic.value.at(blockIndex) : undefined\n\n  if (isTextBlock({schema}, block)) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={block}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={block}\n      element={props.element}\n      legacySchema={legacySchema}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n      schema={schema}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  const selection = slateEditorInstance.selection\n    ? slateRangeToSelection({\n        schema: editorActorSnapshot.context.schema,\n        editor: slateEditorInstance,\n        range: slateEditorInstance.selection,\n      })\n    : null\n\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection,\n      value: slateEditorInstance.value,\n    },\n    decoratorState: slateEditorInstance.decoratorState,\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {useSelector} from '@xstate/react'\nimport {uniq} from 'lodash'\nimport {useContext, useMemo, useRef, type ReactElement} from 'react'\nimport {useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport {\n  getFocusSpan,\n  isOverlappingSelection,\n  isSelectionCollapsed,\n} from '../../selectors'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  EditorSelection,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {getEditorSnapshot} from '../editor-selector'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n\n  /**\n   * A span is considered focused if the selection is collapsed and the caret\n   * is inside the span.\n   */\n  const focused = useSelector(editorActor, (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor,\n    })\n\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusedSpan = getFocusSpan(snapshot)\n\n    if (!focusedSpan) {\n      return false\n    }\n\n    return focusedSpan.node._key === props.leaf._key\n  })\n\n  /**\n   * A span is considered selected if editor selection is overlapping with the\n   * span selection points.\n   */\n  const selected = useSelector(editorActor, (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor,\n    })\n\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const parent = props.children.props.parent\n    const block =\n      parent && isTextBlock(snapshot.context, parent) ? parent : undefined\n    const spanSelection: EditorSelection = block\n      ? {\n          anchor: {\n            path: [{_key: block._key}, 'children', {_key: props.leaf._key}],\n            offset: 0,\n          },\n          focus: {\n            path: [{_key: block._key}, 'children', {_key: props.leaf._key}],\n            offset: props.leaf.text.length,\n          },\n        }\n      : null\n\n    return isOverlappingSelection(spanSelection)(snapshot)\n  })\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = (\n        <RenderDecorator\n          renderDecorator={props.renderDecorator}\n          editorElementRef={spanRef}\n          focused={focused}\n          path={path}\n          selected={selected}\n          schemaType={legacyDecoratorSchemaType}\n          value={mark}\n          type={legacyDecoratorSchemaType}\n        >\n          {children}\n        </RenderDecorator>\n      )\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            <RenderAnnotation\n              renderAnnotation={props.renderAnnotation}\n              block={block}\n              editorElementRef={spanRef}\n              focused={focused}\n              path={path}\n              selected={selected}\n              schemaType={legacyAnnotationSchemaType}\n              value={annotationMarkDef}\n              type={legacyAnnotationSchemaType}\n            >\n              {children}\n            </RenderAnnotation>\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = (\n        <RenderChild\n          renderChild={props.renderChild}\n          annotations={annotationMarkDefs}\n          editorElementRef={spanRef}\n          focused={focused}\n          path={path}\n          schemaType={legacySchema.span}\n          selected={selected}\n          value={child}\n          type={legacySchema.span}\n        >\n          {children}\n        </RenderChild>\n      )\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n\nfunction RenderAnnotation({\n  renderAnnotation,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderAnnotation: RenderAnnotationFunction\n} & BlockAnnotationRenderProps) {\n  return renderAnnotation({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n\nfunction RenderDecorator({\n  renderDecorator,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderDecorator: RenderDecoratorFunction\n} & BlockDecoratorRenderProps) {\n  return renderDecorator({\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n\nfunction RenderChild({\n  renderChild,\n  annotations,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderChild: RenderChildFunction\n} & BlockChildRenderProps) {\n  return renderChild({\n    annotations,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nexport const IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {Point, type Operation, type Range} from 'slate'\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation} from '../internal-utils/move-range-by-operation'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\nexport type DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      decorate: {fn: (nodeEntry: NodeEntry) => Array<BaseRange>}\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': ({context}) => {\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'update range decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n\n    'move range decorations': ({context, event}) => {\n      if (event.type !== 'slate operation') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        let newRange: BaseRange | null | undefined\n\n        newRange = moveRangeByOperation(slateRange, event.operation)\n        if (\n          (newRange && newRange !== slateRange) ||\n          (newRange === null && slateRange)\n        ) {\n          const newRangeSelection = newRange\n            ? slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              })\n            : null\n\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n        }\n\n        // If the newRange is null, it means that the range is not valid anymore and should be removed\n        // If it's undefined, it means that the slateRange is still valid and should be kept\n        if (newRange !== null) {\n          rangeDecorationState.push({\n            ...(newRange || slateRange),\n            rangeDecoration: {\n              ...decoratedRange.rangeDecoration,\n              selection: slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              }),\n            },\n          })\n        }\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'update decorate': assign({\n      decorate: ({context}) => {\n        return {\n          fn: createDecorate(context.schema, context.slateEditor),\n        }\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) =>\n      context.slateEditor.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n          payload: decoratedRange.rangeDecoration.payload,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n          payload: rangeDecoration.payload,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {fn: createDecorate(input.schema, input.slateEditor)},\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: ['set up initial range decorations', 'update decorate'],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: ['set up initial range decorations', 'update decorate'],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'update decorate'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nfunction createDecorate(\n  schema: EditorSchema,\n  slateEditor: PortableTextSlateEditor,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (isEqualToEmptyEditor(slateEditor.children, schema)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return slateEditor.decoratedRanges.filter((decoratedRange) => {\n      // Special case in order to only return one decoration for collapsed ranges\n      if (Range.isCollapsed(decoratedRange)) {\n        // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n        return node.children.some(\n          (_, childIndex) =>\n            Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) &&\n            Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n        )\n      }\n\n      return (\n        Range.intersection(decoratedRange, {\n          anchor: {path, offset: 0},\n          focus: {path, offset: 0},\n        }) || Range.includes(decoratedRange, path)\n      )\n    })\n  }\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {rangeDecorationsMachine} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  ref?: React.Ref<HTMLDivElement>\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  const decorate = useSelector(\n    rangeDecorationsActor,\n    (s) => s.context.decorate?.fn,\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection,\n          },\n          blockIndexMap: slateEditor.blockIndexMap,\n        })\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      removeUnusedMarkDefs: true,\n                      validateFields: false,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n\n      if (!event.isDefaultPrevented()) {\n        relayActor.send({type: 'focused', event})\n\n        if (\n          !slateEditor.selection &&\n          isEqualToEmptyEditor(\n            slateEditor.children,\n            editorActor.getSnapshot().context.schema,\n          )\n        ) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n      }\n    },\n    [editorActor, onFocus, relayActor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: position,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  const callbackRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(node)\n      } else if (forwardedRef) {\n        forwardedRef.current = node\n      }\n\n      if (node) {\n        // Observe mutations (child list and subtree) to this component's DOM,\n        // and make sure the editor selection is valid when that happens.\n        const mutationObserver = new MutationObserver(() => {\n          validateSelection(slateEditor, node)\n        })\n\n        mutationObserver.observe(node, {\n          attributeOldValue: false,\n          attributes: false,\n          characterData: false,\n          childList: true,\n          subtree: true,\n        })\n\n        return () => {\n          mutationObserver.disconnect()\n        }\n      }\n    },\n    [forwardedRef, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      ref={callbackRef}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n\n// This function will handle unexpected DOM changes inside the Editable rendering,\n// and make sure that we can maintain a stable slateEditor.selection when that happens.\n//\n// For example, if this Editable is rendered inside something that might re-render\n// this component (hidden contexts) while the user is still actively changing the\n// contentEditable, this could interfere with the intermediate DOM selection,\n// which again could be picked up by ReactEditor's event listeners.\n// If that range is invalid at that point, the slate.editorSelection could be\n// set either wrong, or invalid, to which slateEditor will throw exceptions\n// that are impossible to recover properly from or result in a wrong selection.\n//\n// Also the other way around, when the ReactEditor will try to create a DOM Range\n// from the current slateEditor.selection, it may throw unrecoverable errors\n// if the current editor.selection is invalid according to the DOM.\n// If this is the case, default to selecting the top of the document, if the\n// user already had a selection.\nfunction validateSelection(slateEditor: Editor, activeElement: HTMLDivElement) {\n  if (!slateEditor.selection) {\n    return\n  }\n\n  let root: Document | ShadowRoot | undefined\n\n  try {\n    root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n  } catch {}\n\n  if (!root) {\n    // The editor has most likely been unmounted\n    return\n  }\n\n  // Return if the editor isn't the active element\n  if (activeElement !== root.activeElement) {\n    return\n  }\n  const window = ReactEditor.getWindow(slateEditor)\n  const domSelection = window.getSelection()\n  if (!domSelection || domSelection.rangeCount === 0) {\n    return\n  }\n  const existingDOMRange = domSelection.getRangeAt(0)\n  try {\n    const newDOMRange = ReactEditor.toDOMRange(\n      slateEditor,\n      slateEditor.selection,\n    )\n    if (\n      newDOMRange.startOffset !== existingDOMRange.startOffset ||\n      newDOMRange.endOffset !== existingDOMRange.endOffset\n    ) {\n      debug('DOM range out of sync, validating selection')\n      // Remove all ranges temporary\n      domSelection?.removeAllRanges()\n      // Set the correct range\n      domSelection.addRange(newDOMRange)\n    }\n  } catch {\n    debug(`Could not resolve selection, selecting top document`)\n    // Deselect the editor\n    Transforms.deselect(slateEditor)\n    // Select top document if there is a top block to select\n    if (slateEditor.children.length > 0) {\n      Transforms.select(slateEditor, [0, 0])\n    }\n    slateEditor.onChange()\n  }\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection = snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = selectors.getSelectedValue(snapshot)\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          removeUnusedMarkDefs: true,\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            removeUnusedMarkDefs: true,\n            validateFields: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return event.originEvent === 'drag.dragstart'\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return event.originEvent === 'drag.dragstart'\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            removeUnusedMarkDefs: true,\n            validateFields: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\n// Maps for each list type, keeping track of the current list count for each\n// level.\nconst levelIndexMaps = new Map<string, Map<number, number>>()\n\n/**\n * Mutates the maps in place.\n */\nexport function buildIndexMaps(\n  context: Pick<EditorContext, 'schema' | 'value'>,\n  {\n    blockIndexMap,\n    listIndexMap,\n  }: {\n    blockIndexMap: Map<string, number>\n    listIndexMap: Map<string, number>\n  },\n): void {\n  blockIndexMap.clear()\n  listIndexMap.clear()\n  levelIndexMaps.clear()\n\n  let previousListItem:\n    | {\n        listItem: string\n        level: number\n      }\n    | undefined\n\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex)\n\n    if (block === undefined) {\n      continue\n    }\n\n    blockIndexMap.set(block._key, blockIndex)\n\n    // Clear the state if we encounter a non-text block\n    if (!isTextBlock(context, block)) {\n      levelIndexMaps.clear()\n      previousListItem = undefined\n\n      continue\n    }\n\n    // Clear the state if we encounter a non-list text block\n    if (block.listItem === undefined || block.level === undefined) {\n      levelIndexMaps.clear()\n      previousListItem = undefined\n\n      continue\n    }\n\n    // If we encounter a new list item, we set the initial index to 1 for the\n    // list type on that level.\n    if (!previousListItem) {\n      const listIndex = 1\n      const levelIndexMap =\n        levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n      levelIndexMap.set(block.level, listIndex)\n      levelIndexMaps.set(block.listItem, levelIndexMap)\n\n      listIndexMap.set(block._key, listIndex)\n\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n\n      continue\n    }\n\n    // If the previous list item is of the same type but on a lower level, we\n    // need to reset the level index map for that type.\n    if (\n      previousListItem.listItem === block.listItem &&\n      previousListItem.level < block.level\n    ) {\n      const listIndex = 1\n      const levelIndexMap =\n        levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n      levelIndexMap.set(block.level, listIndex)\n      levelIndexMaps.set(block.listItem, levelIndexMap)\n\n      listIndexMap.set(block._key, listIndex)\n\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n\n      continue\n    }\n\n    // Reset other list types at current level and deeper\n    levelIndexMaps.forEach((levelIndexMap, listItem) => {\n      if (listItem === block.listItem) {\n        return\n      }\n\n      // Reset all levels that are >= current level\n      const levelsToDelete: number[] = []\n\n      levelIndexMap.forEach((_, level) => {\n        if (level >= block.level!) {\n          levelsToDelete.push(level)\n        }\n      })\n\n      levelsToDelete.forEach((level) => {\n        levelIndexMap.delete(level)\n      })\n    })\n\n    const levelIndexMap =\n      levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n    const levelCounter = levelIndexMap.get(block.level) ?? 0\n    levelIndexMap.set(block.level, levelCounter + 1)\n    levelIndexMaps.set(block.listItem, levelIndexMap)\n\n    listIndexMap.set(block._key, levelCounter + 1)\n\n    previousListItem = {\n      listItem: block.listItem,\n      level: block.level,\n    }\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      } as PortableTextSpan,\n    ],\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport {getMarkState} from '../../selectors/selector.get-mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isSpan(editorActor.getSnapshot().context, op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isSpan(editorActor.getSnapshot().context, op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isSpan(editorActor.getSnapshot().context, op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const snapshot = getEditorSnapshot({\n          editorActorSnapshot: editorActor.getSnapshot(),\n          slateEditorInstance: editor,\n        })\n\n        const markState = getMarkState(snapshot)\n\n        if (!markState) {\n          apply(op)\n          return\n        }\n\n        if (markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (\n            span &&\n            block &&\n            isTextBlock(editorActor.getSnapshot().context, block)\n          ) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: getActiveDecorators(snapshot)},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n\nexport function createUndoStep(editor: Editor) {\n  CURRENT_UNDO_STEP.set(editor, {\n    undoStepId: defaultKeyGenerator(),\n  })\n}\n\nexport function clearUndoStep(editor: Editor) {\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge = currentUndoStepId === previousUndoStepId\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add'\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [...marks, annotationKey],\n        },\n        {at: path},\n      )\n    }\n\n    blockIndex++\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const blockIndex = operation.editor.blockIndexMap.get(operation.at[0]._key)\n\n  if (blockIndex === undefined) {\n    throw new Error(\n      `Unable to find block index for block at ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  const block = operation.editor.value.at(blockIndex)\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = {\n    ...block,\n    ...filteredProps,\n  }\n\n  const parsedBlock = parseBlock({\n    context,\n    block: updatedBlock,\n    options: {\n      removeUnusedMarkDefs: false,\n      validateFields: true,\n    },\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: [blockIndex]})\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {\n        removeUnusedMarkDefs: true,\n        validateFields: true,\n      },\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {\n      removeUnusedMarkDefs: true,\n      validateFields: true,\n    },\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childSetOperationImplementation: BehaviorOperationImplementation<\n  'child.set'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    const {_type, text, ...rest} = operation.props\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        ...rest,\n      },\n      {at: childPath},\n    )\n\n    if (typeof text === 'string') {\n      if (child.text !== text) {\n        operation.editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: child.text,\n        })\n\n        operation.editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text,\n        })\n      }\n    }\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find(\n      (definition) => definition.name === child._type,\n    )\n\n    if (!definition) {\n      throw new Error(\n        `Unable to find schema definition for Inline Object type ${child._type}`,\n      )\n    }\n\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const {_type, _key, ...rest} = operation.props\n\n    for (const prop in rest) {\n      if (!definition.fields.some((field) => field.name === prop)) {\n        delete rest[prop]\n      }\n    }\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: typeof _key === 'string' ? _key : child._key,\n        value: {\n          ...value,\n          ...rest,\n        },\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {applyAll} from '@portabletext/patches'\nimport {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childUnsetOperationImplementation: BehaviorOperationImplementation<\n  'child.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    if (operation.props.includes('text')) {\n      operation.editor.apply({\n        type: 'remove_text',\n        path: childPath,\n        offset: 0,\n        text: child.text,\n      })\n    }\n\n    const newNode: Record<string, unknown> = {}\n\n    for (const prop of operation.props) {\n      if (prop === '_type') {\n        // It's not allowed to unset the _type of a span\n        continue\n      }\n\n      if (prop === '_key') {\n        newNode._key = context.keyGenerator()\n        continue\n      }\n\n      newNode[prop] = null\n    }\n\n    Transforms.setNodes(operation.editor, newNode, {at: childPath})\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const patches = operation.props.map((prop) => ({\n      type: 'unset' as const,\n      path: [prop],\n    }))\n    const newValue = applyAll(value, patches)\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: operation.props.includes('_key')\n          ? context.keyGenerator()\n          : child._key,\n        value: newValue,\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange({\n        context: {\n          schema: context.schema,\n          value: operation.editor.value,\n          selection: manualSelection,\n        },\n        blockIndexMap: operation.editor.blockIndexMap,\n      }) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n      decoratorState: editor.decoratorState,\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection,\n      },\n      blockIndexMap: operation.editor.blockIndexMap,\n    })\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {\n  deleteText,\n  Editor,\n  Element,\n  Range,\n  setSelection,\n  Transforms,\n} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const anchorBlockKey = getBlockKeyFromSelectionPoint(operation.at.anchor)\n  const focusBlockKey = getBlockKeyFromSelectionPoint(operation.at.focus)\n\n  const startBlockKey = operation.at.backward ? focusBlockKey : anchorBlockKey\n  const endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey\n  const endOffset = operation.at.backward\n    ? operation.at.focus.offset\n    : operation.at.anchor.offset\n\n  if (!startBlockKey) {\n    throw new Error('Failed to get start block key')\n  }\n\n  if (!endBlockKey) {\n    throw new Error('Failed to get end block key')\n  }\n\n  const startBlockIndex = operation.editor.blockIndexMap.get(startBlockKey)\n\n  if (startBlockIndex === undefined) {\n    throw new Error('Failed to get start block index')\n  }\n\n  const startBlock = operation.editor.value.at(startBlockIndex)\n\n  if (!startBlock) {\n    throw new Error('Failed to get start block')\n  }\n\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey)\n\n  if (endBlockIndex === undefined) {\n    throw new Error('Failed to get end block index')\n  }\n\n  const endBlock = operation.editor.value.at(endBlockIndex)\n\n  if (!endBlock) {\n    throw new Error('Failed to get end block')\n  }\n\n  if (operation.unit === 'block') {\n    Transforms.removeNodes(operation.editor, {\n      at: {\n        anchor: {path: [startBlockIndex], offset: 0},\n        focus: {path: [endBlockIndex], offset: 0},\n      },\n      mode: 'highest',\n    })\n\n    if (operation.editor.children.length === 0) {\n      Transforms.insertNodes(operation.editor, createPlaceholderBlock(context))\n    }\n\n    return\n  }\n\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  if (operation.direction === 'backward' && operation.unit === 'line') {\n    const parentBlockEntry = Editor.above(operation.editor, {\n      match: (n) => Element.isElement(n) && Editor.isBlock(operation.editor, n),\n      at: range,\n    })\n\n    if (parentBlockEntry) {\n      const [, parentBlockPath] = parentBlockEntry\n      const parentElementRange = Editor.range(\n        operation.editor,\n        parentBlockPath,\n        range.anchor,\n      )\n\n      const currentLineRange = findCurrentLineRange(\n        operation.editor,\n        parentElementRange,\n      )\n\n      if (!Range.isCollapsed(currentLineRange)) {\n        Transforms.delete(operation.editor, {at: currentLineRange})\n        return\n      }\n    }\n  }\n\n  const hanging = isTextBlock(context, endBlock) && endOffset === 0\n\n  deleteText(operation.editor, {\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n    hanging,\n  })\n\n  if (\n    operation.editor.selection &&\n    isTextBlock(context, startBlock) &&\n    isTextBlock(context, endBlock)\n  ) {\n    setSelection(operation.editor, {\n      anchor: operation.editor.selection.focus,\n      focus: operation.editor.selection.focus,\n    })\n  }\n}\n\nfunction findCurrentLineRange(\n  editor: PortableTextSlateEditor,\n  parentRange: Range,\n): Range {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, {at: parentRange}))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    rangesAreOnSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary,\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary,\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      rangesAreOnSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary,\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[left], parentRangeBoundary)\n}\n\nfunction rangesAreOnSameLine(editor: DOMEditor, range1: Range, range2: Range) {\n  const rect1 = DOMEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = DOMEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return domRectsIntersect(rect1, rect2) && domRectsIntersect(rect2, rect1)\n}\n\nfunction domRectsIntersect(rect: DOMRect, compareRect: DOMRect) {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n","import {isSpan} from '@portabletext/schema'\nimport {isEqual} from 'lodash'\nimport {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEmptyTextBlock} from '../utils'\nimport type {\n  BehaviorOperationImplementation,\n  BehaviorOperationImplementationContext,\n} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {\n      removeUnusedMarkDefs: true,\n      validateFields: true,\n    },\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    context,\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n  })\n}\n\nexport function insertBlock({\n  context,\n  block,\n  placement,\n  select,\n  editor,\n}: {\n  context: BehaviorOperationImplementationContext\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], context.schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], context.schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], context.schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        const endBlockChildKeys = endBlock.children.map((child) => child._key)\n        const endBlockMarkDefsKeys =\n          endBlock.markDefs?.map((markDef) => markDef._key) ?? []\n\n        // Assign new keys to markDefs with duplicate keys and keep track of\n        // the mapping between the old and new keys\n        const markDefKeyMap = new Map<string, string>()\n        const adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (endBlockMarkDefsKeys.includes(markDef._key)) {\n            const newKey = context.keyGenerator()\n            markDefKeyMap.set(markDef._key, newKey)\n            return {\n              ...markDef,\n              _key: newKey,\n            }\n          }\n\n          return markDef\n        })\n\n        // Assign new keys to spans with duplicate keys and update any markDef\n        // key if needed\n        const adjustedChildren = block.children.map((child) => {\n          if (isSpan(context, child)) {\n            const marks =\n              child.marks?.map((mark) => {\n                const markDefKey = markDefKeyMap.get(mark)\n\n                if (markDefKey) {\n                  return markDefKey\n                }\n\n                return mark\n              }) ?? []\n\n            if (!isEqual(child.marks, marks)) {\n              return {\n                ...child,\n                _key: endBlockChildKeys.includes(child._key)\n                  ? context.keyGenerator()\n                  : child._key,\n                marks,\n              }\n            }\n          }\n\n          if (endBlockChildKeys.includes(child._key)) {\n            return {\n              ...child,\n              _key: context.keyGenerator(),\n            }\n          }\n\n          return child\n        })\n\n        // Carry over the markDefs from the incoming block to the end block\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: [\n              ...(endBlock.markDefs ?? []),\n              ...(adjustedMarkDefs ?? []),\n            ],\n          },\n          {\n            at: endBlockPath,\n          },\n        )\n\n        // If the children have changed, we need to create a new block with\n        // the adjusted children\n        const adjustedBlock = !isEqual(block.children, adjustedChildren)\n          ? {\n              ...block,\n              children: adjustedChildren as Descendant[],\n            }\n          : block\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [adjustedBlock], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [adjustedBlock], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEmptyTextBlock(context, endBlock)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.splitNodes(editor, {\n                at: currentSelection,\n              })\n\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {Transforms} from 'slate'\nimport {EDITOR_TO_PENDING_SELECTION} from 'slate-dom'\nimport {parseInlineObject, parseSpan} from '../internal-utils/parse-blocks'\nimport {getFocusBlock, getFocusSpan} from '../internal-utils/slate-utils'\nimport {VOID_CHILD_KEY} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertChildOperationImplementation: BehaviorOperationImplementation<\n  'insert.child'\n> = ({context, operation}) => {\n  const focus = operation.editor.selection?.focus\n  const focusBlockIndex = focus?.path.at(0)\n  const focusChildIndex = focus?.path.at(1)\n\n  if (focusBlockIndex === undefined || focusChildIndex === undefined) {\n    throw new Error('Unable to insert child without a focus')\n  }\n\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor: operation.editor})\n\n  if (!focus || !focusBlock || !focusBlockPath) {\n    throw new Error('Unable to insert child without a focus block')\n  }\n\n  if (!isTextBlock(context, focusBlock)) {\n    throw new Error('Unable to insert child into a non-text block')\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const markDefKeyMap = new Map<string, string>()\n  for (const markDef of markDefs) {\n    markDefKeyMap.set(markDef._key, markDef._key)\n  }\n\n  const span = parseSpan({\n    span: operation.child,\n    context,\n    markDefKeyMap,\n    options: {validateFields: true},\n  })\n\n  if (span) {\n    const [focusSpan] = getFocusSpan({editor: operation.editor})\n\n    if (focusSpan) {\n      Transforms.insertNodes(operation.editor, span, {\n        at: focus,\n        select: true,\n      })\n    } else {\n      Transforms.insertNodes(operation.editor, span, {\n        at: [focusBlockIndex, focusChildIndex + 1],\n        select: true,\n      })\n    }\n\n    // This makes sure the selection is set correctly when event handling is run\n    // through Slate's Android input handling\n    EDITOR_TO_PENDING_SELECTION.set(\n      operation.editor,\n      operation.editor.selection,\n    )\n\n    return\n  }\n\n  const inlineObject = parseInlineObject({\n    inlineObject: operation.child,\n    context,\n    options: {validateFields: true},\n  })\n\n  if (inlineObject) {\n    const {_key, _type, ...rest} = inlineObject\n\n    Transforms.insertNodes(\n      operation.editor,\n      {\n        _key,\n        _type,\n        children: [\n          {\n            _key: VOID_CHILD_KEY,\n            _type: 'span',\n            text: '',\n            marks: [],\n          },\n        ],\n        value: rest,\n        __inline: true,\n      },\n      {\n        at: [focusBlockIndex, focusChildIndex + 1],\n        select: true,\n      },\n    )\n\n    return\n  }\n\n  throw new Error('Unable to parse child')\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({operation}) => {\n  Transforms.insertText(operation.editor, operation.text)\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const originKey = getBlockKeyFromSelectionPoint({\n    path: operation.at,\n    offset: 0,\n  })\n\n  if (!originKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey)\n\n  if (originBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  const destinationKey = getBlockKeyFromSelectionPoint({\n    path: operation.to,\n    offset: 0,\n  })\n\n  if (!destinationKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const destinationBlockIndex =\n    operation.editor.blockIndexMap.get(destinationKey)\n\n  if (destinationBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {IS_FOCUSED, IS_READ_ONLY} from 'slate-dom'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({context, operation}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n\n  if (IS_FOCUSED.get(operation.editor) && IS_READ_ONLY.get(operation.editor)) {\n    IS_FOCUSED.set(operation.editor, false)\n  }\n}\n","import {Editor} from 'slate'\nimport type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {childSetOperationImplementation} from './behavior.operation.child.set'\nimport {childUnsetOperationImplementation} from './behavior.operation.child.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertChildOperationImplementation} from './behavior.operation.insert.child'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => void\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'child.set': childSetOperationImplementation,\n  'child.unset': childUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.child': insertChildOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  Editor.withoutNormalizing(operation.editor, () => {\n    try {\n      switch (operation.type) {\n        case 'annotation.add': {\n          behaviorOperationImplementations['annotation.add']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'annotation.remove': {\n          behaviorOperationImplementations['annotation.remove']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'block.set': {\n          behaviorOperationImplementations['block.set']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'block.unset': {\n          behaviorOperationImplementations['block.unset']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'child.set': {\n          behaviorOperationImplementations['child.set']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'child.unset': {\n          behaviorOperationImplementations['child.unset']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'decorator.add': {\n          behaviorOperationImplementations['decorator.add']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'decorator.remove': {\n          behaviorOperationImplementations['decorator.remove']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'delete': {\n          behaviorOperationImplementations.delete({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'history.redo': {\n          behaviorOperationImplementations['history.redo']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'history.undo': {\n          behaviorOperationImplementations['history.undo']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.block': {\n          behaviorOperationImplementations['insert.block']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.child': {\n          behaviorOperationImplementations['insert.child']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.text': {\n          behaviorOperationImplementations['insert.text']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.backward': {\n          behaviorOperationImplementations['move.backward']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.block': {\n          behaviorOperationImplementations['move.block']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.forward': {\n          behaviorOperationImplementations['move.forward']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        default: {\n          behaviorOperationImplementations.select({\n            context,\n            operation: operation,\n          })\n          break\n        }\n      }\n    } catch (error) {\n      console.error(\n        new Error(\n          `Executing \"${operation.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n  })\n}\n","import type {Editor} from 'slate'\n\nconst IS_PERFORMING_OPERATION: WeakMap<Editor, boolean | undefined> =\n  new WeakMap()\n\nexport function withPerformingBehaviorOperation(\n  editor: Editor,\n  fn: () => void,\n) {\n  const prev = IS_PERFORMING_OPERATION.get(editor)\n\n  IS_PERFORMING_OPERATION.set(editor, true)\n\n  fn()\n\n  IS_PERFORMING_OPERATION.set(editor, prev)\n}\n\nexport function isPerformingBehaviorOperation(editor: Editor) {\n  return IS_PERFORMING_OPERATION.get(editor) ?? false\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isPerformingBehaviorOperation} from '../with-performing-behavior-operation'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, Node, Path, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      if (operation.type === 'merge_node') {\n        const index = operation.path[operation.path.length - 1]\n        const prevPath = Path.previous(operation.path)\n        const prevIndex = prevPath[prevPath.length - 1]\n\n        if (operation.path.length !== 1 || prevPath.length !== 1) {\n          apply(operation)\n          return\n        }\n\n        const block = editor.value.at(index)\n        const previousBlock = editor.value.at(prevIndex)\n\n        if (!block || !previousBlock) {\n          apply(operation)\n          return\n        }\n\n        if (\n          !isTextBlock(editorActor.getSnapshot().context, block) ||\n          !isTextBlock(editorActor.getSnapshot().context, previousBlock)\n        ) {\n          apply(operation)\n          return\n        }\n\n        // If we are merging two text blocks, then we need to make sure there\n        // are no duplicate keys in the blocks. Therefore, we assign new keys\n        // to any child or markDef that shares key with other children or\n        // markDefs in the previous block.\n        const previousBlockChildKeys = previousBlock.children.map(\n          (child) => child._key,\n        )\n        const previousBlockMarkDefKeys =\n          previousBlock.markDefs?.map((markDef) => markDef._key) ?? []\n\n        // Assign new keys to markDefs with duplicate keys and keep track of\n        // the mapping between the old and new keys\n        const markDefKeyMap = new Map<string, string>()\n        const adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (previousBlockMarkDefKeys.includes(markDef._key)) {\n            const newKey = editorActor.getSnapshot().context.keyGenerator()\n            markDefKeyMap.set(markDef._key, newKey)\n            return {\n              ...markDef,\n              _key: newKey,\n            }\n          }\n\n          return markDef\n        })\n\n        // Assign new keys to spans with duplicate keys and update any markDef\n        // key if needed\n        let childIndex = 0\n        for (const child of block.children) {\n          if (isSpan(editorActor.getSnapshot().context, child)) {\n            const marks =\n              child.marks?.map((mark) => {\n                const markDefKey = markDefKeyMap.get(mark)\n\n                if (markDefKey) {\n                  return markDefKey\n                }\n\n                return mark\n              }) ?? []\n\n            if (!isEqual(child.marks, marks)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks,\n                },\n                {\n                  at: [index, childIndex],\n                },\n              )\n            }\n          }\n\n          if (previousBlockChildKeys.includes(child._key)) {\n            Transforms.setNodes(\n              editor,\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n              },\n              {\n                at: [index, childIndex],\n              },\n            )\n          }\n          childIndex++\n        }\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            // Make sure the adjusted markDefs are carried along for the merge\n            // operation\n            markDefs: adjustedMarkDefs,\n          },\n        })\n        return\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: _prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      // `unset`ing the last block should be treated similar to `unset`ing the\n      // entire editor value\n      const previousSelection = editor.selection\n\n      Transforms.deselect(editor)\n      Transforms.removeNodes(editor, {at: [block.index]})\n      Transforms.insertNodes(\n        editor,\n        editor.pteCreateTextBlock({decorators: []}),\n      )\n\n      if (previousSelection) {\n        Transforms.select(editor, {\n          anchor: {path: [0, 0], offset: 0},\n          focus: {path: [0, 0], offset: 0},\n        })\n      }\n\n      editor.onChange()\n\n      return true\n    }\n\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentUndoStepId(editor),\n            value: editor.value,\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const blockIndex = op.path.at(0)\n        const isLonelyBlock =\n          op.path.length === 1 &&\n          blockIndex === 0 &&\n          editor.children.length === 1\n        const isBlockObject =\n          op.node._type !== editorActor.getSnapshot().context.schema.block.name\n\n        if (isLonelyBlock && isBlockObject) {\n          debug('Adding placeholder block')\n          Editor.insertNode(editor, editor.pteCreateTextBlock({decorators: []}))\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Editor, Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isListBlock} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nexport function pluginUpdateSelection({\n  editor,\n  editorActor,\n}: {\n  editor: PortableTextSlateEditor\n  editorActor: EditorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(\n        editor.selection,\n      )\n\n      if (existingSelection) {\n        editorActor.send({\n          type: 'update selection',\n          selection: existingSelection,\n        })\n      } else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection)\n\n        editorActor.send({type: 'update selection', selection})\n      }\n    } else {\n      editorActor.send({type: 'update selection', selection: null})\n    }\n  }\n\n  const {onChange} = editor\n\n  editor.onChange = () => {\n    onChange()\n\n    if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n      updateSelection()\n    }\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    if (operation.type === 'insert_text' || operation.type === 'remove_text') {\n      // Inserting and removing text has no effect on index maps so there is\n      // no need to rebuild those.\n      apply(operation)\n      return\n    }\n\n    buildIndexMaps(\n      {\n        schema: context.schema,\n        value: editor.value,\n      },\n      {\n        blockIndexMap: editor.blockIndexMap,\n        listIndexMap: editor.listIndexMap,\n      },\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateSelection} from './slate-plugin.update-selection'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPlaceholderBlock(\n            withUtils(\n              withMaxBlocks(\n                withUndoRedo(\n                  withPatches(\n                    pluginUpdateValue(\n                      editorActor.getSnapshot().context,\n                      pluginUpdateSelection({\n                        editorActor,\n                        editor: e,\n                      }),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {buildIndexMaps} from '../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratedRanges = []\n  instance.decoratorState = {}\n\n  const placeholderBlock = createPlaceholderBlock(\n    config.editorActor.getSnapshot().context,\n  )\n  instance.value = [placeholderBlock]\n  instance.blockIndexMap = new Map<string, number>()\n  instance.listIndexMap = new Map<string, number>()\n\n  buildIndexMaps(\n    {\n      schema: config.editorActor.getSnapshot().context.schema,\n      value: instance.value,\n    },\n    {\n      blockIndexMap: instance.blockIndexMap,\n      listIndexMap: instance.listIndexMap,\n    },\n  )\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {BehaviorEvent} from '../behaviors'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport type EditorDom = {\n  getBlockNodes: (snapshot: EditorSnapshot) => Array<Node>\n  getChildNodes: (snapshot: EditorSnapshot) => Array<Node>\n  /**\n   * Let the Editor set the drag ghost. This is to be sure that it will get\n   * properly removed again when the drag ends.\n   */\n  setDragGhost: ({\n    event,\n    ghost,\n  }: {\n    event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n    ghost: {\n      element: HTMLElement\n      x: number\n      y: number\n    }\n  }) => void\n}\n\nexport function createEditorDom(\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void,\n  slateEditor: PortableTextSlateEditor,\n): EditorDom {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({event, ghost}) => setDragGhost({sendBack, event, ghost}),\n  }\n}\n\nfunction getBlockNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const blockEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'highest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction getChildNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const childEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'lowest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost,\n}: {\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n  event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n  ghost: {\n    element: HTMLElement\n    x: number\n    y: number\n  }\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y)\n\n  sendBack({\n    type: 'set drag ghost',\n    ghost: ghost.element,\n  })\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\n/**\n * By default, same-type annotations can overlap. This Core Behavior ensures\n * that annotations of the same type are mutually exclusive.\n */\nconst preventOverlappingAnnotations = defineBehavior({\n  // Given an `annotation.add` event\n  on: 'annotation.add',\n  // When the annotation is active in the selection\n  guard: ({snapshot, event}) =>\n    selectors.isActiveAnnotation(event.annotation.name, {mode: 'partial'})(\n      snapshot,\n    ),\n  // Then the existing annotation is removed\n  actions: [\n    ({event}) => [\n      raise({type: 'annotation.remove', annotation: event.annotation}),\n      raise(event),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = [\n  addAnnotationOnCollapsedSelection,\n  preventOverlappingAnnotations,\n]\n","import {\n  bold,\n  code,\n  createKeyboardShortcut,\n  italic,\n  redo,\n  underline,\n  undo,\n} from '@portabletext/keyboard-shortcuts'\n\nexport const defaultKeyboardShortcuts = {\n  arrowDown: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowDown',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  arrowUp: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowUp',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  backspace: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Backspace',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  break: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: false,\n      },\n    ],\n  }),\n  lineBreak: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: true,\n      },\n    ],\n  }),\n  decorators: {\n    strong: bold,\n    em: italic,\n    underline: underline,\n    code: code,\n  },\n  delete: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Delete',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  history: {\n    undo,\n    redo,\n  },\n  tab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  shiftTab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: true,\n      },\n    ],\n  }),\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = defaultKeyboardShortcuts.arrowDown.guard(\n      event.originEvent,\n    )\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = defaultKeyboardShortcuts.arrowUp.guard(event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport * as selectors from '../selectors'\nimport {effect, forward, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  defineBehavior({\n    on: 'drag.dragstart',\n    guard: ({snapshot, dom, event}) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection,\n      })\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n      const draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n      }\n\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks,\n      }\n    },\n    actions: [\n      (\n        {dom, event},\n        {dragSelection, draggedDomNodes, selectingEntireBlocks},\n      ) => {\n        const dragGhost = document.createElement('div')\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.originEvent.clientX - customGhostRect.left\n            const y = event.originEvent.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {\n                    element: dragGhost,\n                    x,\n                    y,\n                  },\n                })\n              }),\n              forward(event),\n            ]\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.originEvent.clientX - blocksDomRect.left\n            const y = event.originEvent.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {element: dragGhost, x, y},\n                })\n              }),\n              forward(event),\n            ]\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.originEvent.clientX - childrenDomRect.left\n          const y = event.originEvent.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          return [\n            raise({\n              type: 'select',\n              at: dragSelection,\n            }),\n            effect(() => {\n              dom.setDragGhost({\n                event,\n                ghost: {element: dragGhost, x, y},\n              })\n            }),\n            forward(event),\n          ]\n        }\n      },\n    ],\n  }),\n\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({event}) => event.dragOrigin !== undefined,\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        event.originEvent.dragOrigin === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = event.originEvent.dragOrigin\n      const dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot,\n      })\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          dropPosition,\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          dropPosition,\n          originEvent,\n        },\n      ) => [\n        raise({\n          type: 'select',\n          at: dropPosition,\n        }),\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getActiveAnnotationsMarks} from '../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getFocusSpan} from '../selectors/selector.get-focus-span'\nimport {getMarkState} from '../selectors/selector.get-mark-state'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot}) => {\n      const focusSpan = getFocusSpan(snapshot)\n\n      if (!focusSpan) {\n        return false\n      }\n\n      const markState = getMarkState(snapshot)\n      const activeDecorators = getActiveDecorators(snapshot)\n      const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n\n      if (markState && markState.state === 'unchanged') {\n        const markStateDecorators = (markState.marks ?? []).filter((mark) =>\n          snapshot.context.schema.decorators\n            .map((decorator) => decorator.name)\n            .includes(mark),\n        )\n\n        if (\n          markStateDecorators.length === activeDecorators.length &&\n          markStateDecorators.every((mark) => activeDecorators.includes(mark))\n        ) {\n          return false\n        }\n      }\n\n      return {activeDecorators, activeAnnotations}\n    },\n    actions: [\n      ({snapshot, event}, {activeDecorators, activeAnnotations}) => [\n        raise({\n          type: 'insert.child',\n          child: {\n            _type: snapshot.context.schema.span.name,\n            text: event.text,\n            marks: [...activeDecorators, ...activeAnnotations],\n          },\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nconst breakingInlineObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusInlineObject = selectors.getFocusInlineObject(snapshot)\n\n    return selectionCollapsed && focusInlineObject\n  },\n  actions: [\n    () => [raise({type: 'move.forward', distance: 1}), raise({type: 'split'})],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject,\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\n\nexport function isAtTheBeginningOfBlock({\n  context,\n  block,\n}: {\n  context: EditorContext\n  block: PortableTextBlock\n}) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  if (!context.selection) {\n    return false\n  }\n\n  if (!isSelectionCollapsed(context.selection)) {\n    return false\n  }\n\n  const focusSpanKey = getChildKeyFromSelectionPoint(context.selection.focus)\n\n  return (\n    focusSpanKey === block.children[0]._key &&\n    context.selection.focus.offset === 0\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {\n  getBlockEndPoint,\n  getBlockStartPoint,\n  isEqualSelectionPoints,\n} from '../utils'\nimport {isAtTheBeginningOfBlock} from '../utils/util.at-the-beginning-of-block'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n    if (!focusTextBlock) {\n      return false\n    }\n\n    if (focusTextBlock.node.level !== 1) {\n      return false\n    }\n\n    if (\n      !isAtTheBeginningOfBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n      })\n    ) {\n      return false\n    }\n\n    return {focusTextBlock}\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Delete in an empty list item would delete it by default. Instead,\n * then text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnDelete = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusListBlock || !nextBlock) {\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, nextBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {focusListBlock, nextBlock}\n  },\n  actions: [\n    (_, {nextBlock}) => [\n      raise({\n        type: 'insert.block',\n        block: nextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: nextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Backspace before an empty list item would delete it by default.\n * Instead, the text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !previousBlock) {\n      return false\n    }\n\n    if (\n      !isAtTheBeginningOfBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n      })\n    ) {\n      return false\n    }\n\n    if (!isListBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    const previousBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: previousBlock,\n    })\n\n    return {focusTextBlock, previousBlockEndPoint}\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlockEndPoint}) => [\n      raise({\n        type: 'select',\n        at: {\n          anchor: previousBlockEndPoint,\n          focus: previousBlockEndPoint,\n        },\n      }),\n      raise({\n        type: 'insert.block',\n        block: focusTextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * When performing a delete operation where the start point of the operation is\n * at the start of a list item and the end point of the operation is in another\n * list item, we make sure the preserve the first list item. Otherwise, the\n * default behavior would be to preserve the last item.\n */\nconst deletingListFromStart = defineBehavior({\n  on: 'delete',\n  guard: ({snapshot, event}) => {\n    const blocksToDelete = selectors.getSelectedBlocks({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n\n    if (blocksToDelete.length < 2) {\n      return false\n    }\n\n    const startBlock = blocksToDelete.at(0)?.node\n    const middleBlocks = blocksToDelete.slice(1, -1)\n    const endBlock = blocksToDelete.at(-1)?.node\n\n    if (\n      !isListBlock(snapshot.context, startBlock) ||\n      !isListBlock(snapshot.context, endBlock)\n    ) {\n      // It's that any block in between isn't a list item, but the first and\n      // last blocks have to be list items for this Behavior to take effect.\n      return false\n    }\n\n    const deleteStartPoint = selectors.getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n    const deleteEndPoint = selectors.getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n\n    if (!deleteStartPoint || !deleteEndPoint) {\n      return false\n    }\n\n    const startBlockStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{_key: startBlock._key}],\n      },\n    })\n\n    if (!isEqualSelectionPoints(deleteStartPoint, startBlockStartPoint)) {\n      // If we aren't deleting from the beginning of the first list item, then\n      // there is no need to proceed. The default delete Behavior will suffice.\n      return false\n    }\n\n    const startBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{_key: startBlock._key}],\n      },\n    })\n    const endBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: {\n        node: endBlock,\n        path: [{_key: endBlock._key}],\n      },\n    })\n    const slicedEndBlock = sliceTextBlock({\n      context: {\n        schema: snapshot.context.schema,\n        selection: {\n          anchor: deleteEndPoint,\n          focus: endBlockEndPoint,\n        },\n      },\n      block: endBlock,\n    })\n\n    return {\n      startBlockStartPoint,\n      startBlockEndPoint,\n      middleBlocks,\n      endBlock,\n      slicedEndBlock,\n    }\n  },\n  actions: [\n    (\n      _,\n      {\n        startBlockStartPoint,\n        startBlockEndPoint,\n        middleBlocks,\n        endBlock,\n        slicedEndBlock,\n      },\n    ) => [\n      // All block in between can safely be deleted.\n      ...middleBlocks.map((block) =>\n        raise({type: 'delete.block', at: block.path}),\n      ),\n      // The last block is deleted as well.\n      raise({type: 'delete.block', at: [{_key: endBlock._key}]}),\n      // But in case the delete operation didn't reach all the way to the end\n      // of it, we first place the caret at the end of the start block...\n      raise({\n        type: 'select',\n        at: {\n          anchor: startBlockEndPoint,\n          focus: startBlockEndPoint,\n        },\n      }),\n      // ...and insert the rest of the end block at the end of it.\n      raise({\n        type: 'insert.block',\n        block: slicedEndBlock,\n        placement: 'auto',\n        select: 'none',\n      }),\n      // And finally, we delete the original text of the start block.\n      raise({\n        type: 'delete',\n        at: {anchor: startBlockStartPoint, focus: startBlockEndPoint},\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Enter in an empty list item would create a new list item below by\n * default. Instead, the list properties should be cleared.\n */\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Tab should indent the list item.\n */\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = defaultKeyboardShortcuts.tab.guard(event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * Hitting Shift+Tab should unindent the list item.\n */\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = defaultKeyboardShortcuts.shiftTab.guard(\n      event.originEvent,\n    )\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * An inserted list inherits the `level` from the list item where it's\n * inserted. The entire list tree is adjusted to match the new level.\n */\nconst inheritListLevel = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level\n\n    if (levelDifference === 0) {\n      return false\n    }\n\n    return {levelDifference, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {levelDifference, insertedListBlock}) => {\n      let adjustLevel = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustLevel) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustLevel &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                level: Math.min(\n                  MAX_LIST_LEVEL,\n                  Math.max(1, block.level + levelDifference),\n                ),\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustLevel = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted list inherits the `listItem` from the list item at the level\n * it's inserted.\n */\nconst inheritListItem = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    if (focusListBlock.node.level !== insertedListBlock.level) {\n      return false\n    }\n\n    if (focusListBlock.node.listItem === insertedListBlock.listItem) {\n      return false\n    }\n\n    return {listItem: focusListBlock.node.listItem, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {listItem, insertedListBlock}) => {\n      let adjustListItem = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustListItem) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustListItem &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                listItem:\n                  block.level === insertedListBlock.level\n                    ? listItem\n                    : block.listItem,\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustListItem = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted text block inherits the `listItem` and `level` from the list\n * item where it's inserted.\n */\nconst inheritListProperties = defineBehavior({\n  on: 'insert.block',\n  guard: ({snapshot, event}) => {\n    if (event.placement !== 'auto') {\n      return false\n    }\n\n    if (event.block._type !== snapshot.context.schema.block.name) {\n      return false\n    }\n\n    if (event.block.listItem !== undefined) {\n      return false\n    }\n\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem,\n    }\n  },\n  actions: [\n    ({event}, {level, listItem}) => [\n      raise({\n        ...event,\n        block: {\n          ...event.block,\n          level,\n          listItem,\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  deletingListFromStart,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBehaviors} from './behavior.core.insert'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  ...coreAnnotationBehaviors,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  ...coreInsertBehaviors,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.mergeTextIntoListOnDelete,\n  coreListBehaviors.mergeTextIntoListOnBackspace,\n  coreListBehaviors.deletingListFromStart,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreListBehaviors.inheritListLevel,\n  coreListBehaviors.inheritListItem,\n  coreListBehaviors.inheritListProperties,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n  coreInsertBreakBehaviors.breakingInlineObject,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {Editor} from 'slate'\n\nexport function withoutNormalizingConditional(\n  editor: Editor,\n  predicate: () => boolean,\n  fn: () => void,\n) {\n  if (predicate()) {\n    Editor.withoutNormalizing(editor, fn)\n  } else {\n    fn()\n  }\n}\n","import {isActiveAnnotation} from '../selectors'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.set',\n    guard: ({snapshot, event}) => {\n      const blockKey = event.at[0]._key\n      const markDefKey = event.at[2]._key\n\n      const block = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n            focus: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const updatedMarkDefs = block.node.markDefs?.map((markDef) => {\n        if (markDef._key === markDefKey) {\n          return {\n            ...markDef,\n            ...event.props,\n          }\n        }\n\n        return markDef\n      })\n\n      return {blockKey, updatedMarkDefs}\n    },\n    actions: [\n      (_, {blockKey, updatedMarkDefs}) => [\n        raise({\n          type: 'block.set',\n          at: [{_key: blockKey}],\n          props: {markDefs: updatedMarkDefs},\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'backward') {\n        return false\n      }\n\n      const previousBlock = selectors.getPreviousBlock(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!previousBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)) {\n        return false\n      }\n\n      const previousBlockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: previousBlock,\n      })\n\n      if (!isTextBlock(snapshot.context, previousBlock.node)) {\n        return false\n      }\n\n      return {previousBlockEndPoint, focusTextBlock}\n    },\n    actions: [\n      (_, {previousBlockEndPoint, focusTextBlock}) => [\n        raise({\n          type: 'delete.block',\n          at: focusTextBlock.path,\n        }),\n        raise({\n          type: 'select',\n          at: {\n            anchor: previousBlockEndPoint,\n            focus: previousBlockEndPoint,\n          },\n        }),\n        raise({\n          type: 'insert.block',\n          block: focusTextBlock.node,\n          placement: 'auto',\n          select: 'start',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'forward') {\n        return false\n      }\n\n      const nextBlock = selectors.getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: event.at,\n        },\n      })\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: event.at,\n        },\n      })\n\n      if (!nextBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!utils.isEmptyTextBlock(snapshot.context, focusTextBlock.node)) {\n        return false\n      }\n\n      const nextBlockStartPoint = utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: nextBlock,\n      })\n\n      return {focusTextBlock, nextBlockStartPoint}\n    },\n    actions: [\n      (_, {focusTextBlock, nextBlockStartPoint}) => [\n        raise({\n          type: 'delete.block',\n          at: focusTextBlock.path,\n        }),\n        raise({\n          type: 'select',\n          at: {\n            anchor: nextBlockStartPoint,\n            focus: nextBlockStartPoint,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'forward') {\n        return false\n      }\n\n      const nextBlock = selectors.getNextBlock(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!nextBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)) {\n        return false\n      }\n\n      if (!isTextBlock(snapshot.context, nextBlock.node)) {\n        return false\n      }\n\n      return {nextBlock}\n    },\n    actions: [\n      (_, {nextBlock}) => [\n        raise({\n          type: 'delete.block',\n          at: nextBlock.path,\n        }),\n        raise({\n          type: 'insert.block',\n          block: nextBlock.node,\n          placement: 'auto',\n          select: 'none',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n          unit: 'block',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.child',\n    guard: ({snapshot, event}) => {\n      const focusChild = selectors.getFocusChild({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!focusChild) {\n        return false\n      }\n\n      if (isSpan(snapshot.context, focusChild.node)) {\n        return {\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: focusChild.node.text.length,\n            },\n          },\n        }\n      }\n\n      return {\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0,\n          },\n          focus: {\n            path: event.at,\n            offset: 0,\n          },\n        },\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {isTextBlock} from '@portabletext/schema'\nimport * as selectors from '../selectors'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeserializeBehaviors = [\n  defineBehavior({\n    on: 'deserialize',\n    guard: ({event}) => {\n      const portableText = event.originEvent.originEvent.dataTransfer.getData(\n        'application/x-portable-text',\n      )\n\n      if (portableText) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'application/x-portable-text',\n          data: portableText,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const json =\n        event.originEvent.originEvent.dataTransfer.getData('application/json')\n\n      if (json) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'application/json',\n          data: json,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const html =\n        event.originEvent.originEvent.dataTransfer.getData('text/html')\n\n      if (html) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'text/html',\n          data: html,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const text =\n        event.originEvent.originEvent.dataTransfer.getData('text/plain')\n\n      if (text) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'text/plain',\n          data: text,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      return false\n    },\n    actions: [(_, deserializeEvent) => [raise(deserializeEvent)]],\n  }),\n  defineBehavior({\n    on: 'deserialize',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialization.failure',\n          mimeType: '*/*',\n          reason: 'No Behavior was able to handle the incoming data',\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialize.data',\n    guard: ({snapshot, event}) => {\n      const converter = snapshot.context.converters.find(\n        (converter) => converter.mimeType === event.mimeType,\n      )\n\n      if (!converter) {\n        return false\n      }\n\n      return converter.deserialize({\n        snapshot,\n        event: {\n          type: 'deserialize',\n          data: event.data,\n        },\n      })\n    },\n    actions: [\n      ({event}, deserializeEvent) => [\n        raise({\n          ...deserializeEvent,\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = getActiveDecorators(snapshot)\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    guard: ({event}) => {\n      if (event.mimeType === 'application/x-portable-text') {\n        const json =\n          event.originEvent.originEvent.dataTransfer.getData('application/json')\n\n        if (json) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'application/json',\n            data: json,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      if (event.mimeType === 'application/json') {\n        const html =\n          event.originEvent.originEvent.dataTransfer.getData('text/html')\n\n        if (html) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'text/html',\n            data: html,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      if (event.mimeType === 'text/html') {\n        const text =\n          event.originEvent.originEvent.dataTransfer.getData('text/plain')\n\n        if (text) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'text/plain',\n            data: text,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      return false\n    },\n    actions: [(_, deserializeDataEvent) => [raise(deserializeDataEvent)]],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n]\n","import {getFocusTextBlock, getLastBlock} from '../selectors'\nimport {\n  getBlockEndPoint,\n  getBlockStartPoint,\n  isEmptyTextBlock,\n  isEqualSelectionPoints,\n} from '../utils'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => {\n      const onlyBlock =\n        event.blocks.length === 1 ? event.blocks.at(0) : undefined\n\n      if (!onlyBlock) {\n        return false\n      }\n\n      return {onlyBlock}\n    },\n    actions: [\n      ({event}, {onlyBlock}) => [\n        raise({\n          type: 'insert.block',\n          block: onlyBlock,\n          placement: event.placement,\n          select: event.select ?? 'end',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'before') {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({snapshot, event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: snapshot.context.selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: firstBlockKey}],\n                  select: 'start',\n                }),\n              ]\n            : [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: lastBlockKey}],\n                  select: 'end',\n                }),\n              ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'after') {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({snapshot, event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: snapshot.context.selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: firstBlockKey}],\n                  select: 'start',\n                }),\n              ]\n            : [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: lastBlockKey}],\n                  select: 'end',\n                }),\n              ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      if (!isEmptyTextBlock(snapshot.context, focusTextBlock.node)) {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {focusTextBlock, firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none' || event.select === 'start'\n          ? [\n              raise({\n                type: 'select.block',\n                at: [{_key: firstBlockKey}],\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({\n                type: 'select.block',\n                at: [{_key: lastBlockKey}],\n                select: 'end',\n              }),\n            ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock || !snapshot.context.selection) {\n        return false\n      }\n\n      const focusBlockStartPoint = getBlockStartPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n      const focusBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n      const focusTextBlockAfter = sliceTextBlock({\n        context: {\n          schema: snapshot.context.schema,\n          selection: {\n            anchor: snapshot.context.selection.focus,\n            focus: focusBlockEndPoint,\n          },\n        },\n        block: focusTextBlock.node,\n      })\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n\n      return {\n        firstBlockKey,\n        focusBlockStartPoint,\n        focusBlockEndPoint,\n        focusTextBlockAfter,\n        selection: snapshot.context.selection,\n      }\n    },\n    actions: [\n      (\n        {event},\n        {\n          focusBlockEndPoint,\n          focusTextBlockAfter,\n          selection,\n          firstBlockKey,\n          focusBlockStartPoint,\n        },\n      ) => [\n        ...event.blocks.flatMap((block, index) =>\n          index === 0\n            ? [\n                ...(isEqualSelectionPoints(selection.focus, focusBlockEndPoint)\n                  ? []\n                  : [\n                      raise({\n                        type: 'delete',\n                        at: {\n                          anchor: selection.focus,\n                          focus: focusBlockEndPoint,\n                        },\n                      }),\n                    ]),\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: 'auto',\n                  select: 'end',\n                }),\n              ]\n            : index === event.blocks.length - 1\n              ? [\n                  raise({\n                    type: 'insert.block',\n                    block,\n                    placement: 'after',\n                    select: 'end',\n                  }),\n                  raise({\n                    type: 'insert.block',\n                    block: focusTextBlockAfter,\n                    placement: 'auto',\n                    select: event.select === 'end' ? 'none' : 'end',\n                  }),\n                ]\n              : [\n                  raise({\n                    type: 'insert.block',\n                    block,\n                    placement: 'after',\n                    select: 'end',\n                  }),\n                ],\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                isEqualSelectionPoints(selection.focus, focusBlockStartPoint)\n                  ? raise({\n                      type: 'select.block',\n                      at: [{_key: firstBlockKey}],\n                      select: 'start',\n                    })\n                  : raise({\n                      type: 'select',\n                      at: {\n                        anchor: selection.focus,\n                        focus: selection.focus,\n                      },\n                    }),\n              ]\n            : []),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.child',\n    guard: ({snapshot}) => {\n      const lastBlock = getLastBlock(snapshot)\n\n      if (!lastBlock) {\n        return false\n      }\n\n      if (snapshot.context.selection) {\n        return false\n      }\n\n      const lastBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: lastBlock,\n      })\n\n      return {lastBlockEndPoint}\n    },\n    actions: [\n      ({event}, {lastBlockEndPoint}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: lastBlockEndPoint,\n            focus: lastBlockEndPoint,\n          },\n        }),\n        raise(event),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.child',\n    guard: ({snapshot}) => {\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      return snapshot.context.selection && !focusTextBlock\n    },\n    actions: [\n      ({snapshot, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [\n              {\n                _type: snapshot.context.schema.span.name,\n                text: '',\n                marks: [],\n              },\n            ],\n          },\n          placement: 'auto',\n          select: 'end',\n        }),\n        raise(event),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.inline object',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.child',\n          child: {\n            _type: event.inlineObject.name,\n            ...event.inlineObject.value,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n  defineBehavior({\n    on: 'insert.span',\n    guard: ({snapshot}) => !getFocusTextBlock(snapshot),\n    actions: [\n      ({snapshot, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [\n              {\n                _type: snapshot.context.schema.span.name,\n                text: '',\n                marks: [],\n              },\n            ],\n          },\n          placement: 'auto',\n          select: 'end',\n        }),\n        raise(event),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.span',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const markDefs =\n        event.annotations?.map((annotation) => ({\n          _type: annotation.name,\n          _key: snapshot.context.keyGenerator(),\n          ...annotation.value,\n        })) ?? []\n\n      return {markDefs, focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {markDefs, focusTextBlock}) => [\n        ...(focusTextBlock\n          ? [\n              raise({\n                type: 'block.set',\n                at: focusTextBlock.path,\n                props: {\n                  markDefs: [\n                    ...(focusTextBlock.node.markDefs ?? []),\n                    ...markDefs,\n                  ],\n                },\n              }),\n            ]\n          : []),\n        raise({\n          type: 'insert.child',\n          child: {\n            _type: snapshot.context.schema.span.name,\n            text: event.text,\n            marks: [\n              ...(event.decorators ?? []),\n              ...markDefs.map((markDef) => markDef._key),\n            ],\n          },\n        }),\n      ],\n    ],\n  }),\n]\n","import {createKeyboardShortcut} from '@portabletext/keyboard-shortcuts'\nimport {isTextBlock} from '@portabletext/schema'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {\n  getFocusBlock,\n  getFocusInlineObject,\n  getPreviousBlock,\n  isSelectionCollapsed,\n  isSelectionExpanded,\n} from '../selectors'\nimport {getBlockEndPoint, isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst shiftLeft = createKeyboardShortcut({\n  default: [\n    {\n      key: 'ArrowLeft',\n      shift: true,\n      meta: false,\n      ctrl: false,\n      alt: false,\n    },\n  ],\n})\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * When Backspace is pressed on an inline object, Slate will raise a\n   * `delete.backward` event with `unit: 'block'`. This is wrong and this\n   * Behavior adjusts that.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.backspace.guard(event.originEvent) &&\n      isSelectionCollapsed(snapshot) &&\n      getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'delete.backward', unit: 'character'})]],\n  }),\n  /**\n   * When Delete is pressed on an inline object, Slate will raise a\n   * `delete.forward` event with `unit: 'block'`. This is wrong and this\n   * Behavior adjusts that.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.delete.guard(event.originEvent) &&\n      isSelectionCollapsed(snapshot) &&\n      getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'delete.forward', unit: 'character'})]],\n  }),\n\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      isSelectionCollapsed(snapshot) &&\n      getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On Firefox, Enter might collapse the selection. To mitigate this, we\n   * `raise` an `insert.break` event manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      isSelectionExpanded(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.undo'})]],\n  }),\n\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.redo'})]],\n  }),\n\n  /**\n   * Fix edge case where Shift+ArrowLeft didn't reduce a selection hanging\n   * onto an empty text block.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) => {\n      if (!snapshot.context.selection || !shiftLeft.guard(event.originEvent)) {\n        return false\n      }\n\n      const focusBlock = getFocusBlock(snapshot)\n\n      if (!focusBlock) {\n        return false\n      }\n\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: focusBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusBlock.path,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const hanging =\n        isTextBlock(snapshot.context, focusBlock.node) &&\n        snapshot.context.selection.focus.offset === 0\n\n      if (hanging && isEmptyTextBlock(snapshot.context, focusBlock.node)) {\n        return {previousBlock, selection: snapshot.context.selection}\n      }\n\n      return false\n    },\n    actions: [\n      ({snapshot}, {previousBlock, selection}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: selection.anchor,\n            focus: getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            }),\n          },\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot, event}) => {\n      if (\n        !snapshot.context.schema.lists.some(\n          (list) => list.name === event.listItem,\n        )\n      ) {\n        return false\n      }\n\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: block.node.level ?? 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getFocusBlock, getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.block',\n    guard: ({snapshot, event}) => {\n      if (event.select !== 'end') {\n        return false\n      }\n\n      const block = getFocusBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const blockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block,\n      })\n\n      return {blockEndPoint}\n    },\n    actions: [\n      (_, {blockEndPoint}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: blockEndPoint,\n            focus: blockEndPoint,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      return {previousBlock}\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'select.block',\n          at: previousBlock.path,\n          select: event.select,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      return {nextBlock}\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'select.block',\n          at: nextBlock.path,\n          select: event.select,\n        }),\n      ],\n    ],\n  }),\n]\n","import {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSerializeBehaviors = [\n  defineBehavior({\n    on: 'serialize',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize.data',\n          mimeType: 'application/x-portable-text',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'application/json',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialize.data',\n    guard: ({snapshot, event}) => {\n      const converter = snapshot.context.converters.find(\n        (converter) => converter.mimeType === event.mimeType,\n      )\n\n      if (!converter) {\n        return false\n      }\n\n      return converter.serialize({\n        snapshot,\n        event: {\n          type: 'serialize',\n          originEvent: event.originEvent.type,\n        },\n      })\n    },\n    actions: [\n      ({event}, serializeEvent) => [\n        raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n]\n","import {isTextBlock} from '@portabletext/schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [],\n  }),\n\n  /**\n   * You can't split a block object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusBlockObject(snapshot),\n    actions: [],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (\n        !isTextBlock(snapshot.context, selectionStartBlock.node) &&\n        isTextBlock(snapshot.context, selectionEndBlock.node)\n      ) {\n        return {selection}\n      }\n\n      return false\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (selectionStartBlock.node._key === selectionEndBlock.node._key) {\n        return false\n      }\n\n      const startPoint = utils.getSelectionStartPoint(selection)\n      const startBlockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: selectionStartBlock,\n      })\n      const endPoint = utils.getSelectionEndPoint(selection)\n      const endBlockStartPoint = utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: selectionEndBlock,\n      })\n\n      const selectedValue = selectors.getSelectedValue(snapshot)\n\n      const blocksInBetween = selectedValue.filter(\n        (block) =>\n          block._key !== selectionStartBlock.node._key &&\n          block._key !== selectionEndBlock.node._key,\n      )\n\n      return {\n        startPoint,\n        startBlockEndPoint,\n        endPoint,\n        endBlockStartPoint,\n        blocksInBetween,\n      }\n    },\n    actions: [\n      (\n        _,\n        {\n          startPoint,\n          startBlockEndPoint,\n          endPoint,\n          endBlockStartPoint,\n          blocksInBetween,\n        },\n      ) => [\n        raise({\n          type: 'delete',\n          at: {anchor: startPoint, focus: startBlockEndPoint},\n        }),\n        ...blocksInBetween.map((block) =>\n          raise({type: 'delete.block', at: [{_key: block._key}]}),\n        ),\n        raise({\n          type: 'delete',\n          at: {anchor: endBlockStartPoint, focus: endPoint},\n        }),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise({type: 'split'}),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || !utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartPoint = utils.getSelectionStartPoint(selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      const blockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n\n      const newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint,\n      }\n\n      const newTextBlock = parseBlock({\n        block: sliceTextBlock({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection,\n          },\n          block: focusTextBlock.node,\n        }),\n        context: snapshot.context,\n        options: {\n          removeUnusedMarkDefs: true,\n          validateFields: false,\n        },\n      })\n\n      if (!newTextBlock) {\n        return false\n      }\n\n      return {\n        newTextBlock,\n        newTextBlockSelection,\n      }\n    },\n    actions: [\n      (_, {newTextBlock, newTextBlockSelection}) =>\n        utils.isSelectionCollapsed(newTextBlockSelection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({type: 'delete', at: newTextBlockSelection}),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import * as selectors from '../selectors'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractDeserializeBehaviors} from './behavior.abstract.deserialize'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSerializeBehaviors} from './behavior.abstract.serialize'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractDeserializeBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSerializeBehaviors,\n  ...abstractSplitBehaviors,\n]\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {\n  BlockWithOptionalKey,\n  ChildWithOptionalKey,\n} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\nimport type {AnnotationPath, BlockPath, ChildPath} from '../types/paths'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | BehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'child.set',\n  'child.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.block',\n  'insert.child',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: BlockPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: BlockPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.set'>\n      at: ChildPath\n      props: {[prop: string]: unknown}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.unset'>\n      at: ChildPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.child'>\n      child: ChildWithOptionalKey\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: BlockPath\n      to: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\n/**\n * @beta\n */\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.set',\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.child',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialize.data',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.inline object',\n  'insert.soft break',\n  'insert.span',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.block',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialize.data',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.set'>\n      at: AnnotationPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.child'>\n      at: ChildPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize.data'>\n      mimeType: MIMEType\n      data: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize.data'>\n      mimeType: MIMEType\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.block'>\n      at: BlockPath\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        clientX: number\n        clientY: number\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import {createEditorDom} from '../editor/editor-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withPerformingBehaviorOperation} from '../editor/with-performing-behavior-operation'\nimport {clearUndoStep, createUndoStep} from '../editor/with-undo-step'\nimport {withoutNormalizingConditional} from '../editor/without-normalizing-conditional'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n  type ExternalBehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack,\n}: {\n  mode: 'send' | 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n  sendBack: (\n    event: {type: 'set drag ghost'; ghost: HTMLElement} | ExternalBehaviorEvent,\n  ) => void\n}) {\n  if (mode === 'send' && !isNativeBehaviorEvent(event)) {\n    createUndoStep(editor)\n  }\n\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    if (mode === 'send') {\n      clearUndoStep(editor)\n    }\n\n    withPerformingBehaviorOperation(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor),\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    if (eventBehavior.actions.length === 0) {\n      nativeEventPrevented = true\n    }\n\n    let actionSetIndex = -1\n\n    for (const actionSet of eventBehavior.actions) {\n      actionSetIndex++\n\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor),\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      nativeEventPrevented =\n        actions.some(\n          (action) => action.type === 'raise' || action.type === 'execute',\n        ) || !actions.some((action) => action.type === 'forward')\n\n      let undoStepCreated = false\n\n      if (actionSetIndex > 0) {\n        // Since there are multiple action sets\n        createUndoStep(editor)\n\n        undoStepCreated = true\n      }\n\n      if (\n        !undoStepCreated &&\n        actions.some((action) => action.type === 'execute')\n      ) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        createUndoStep(editor)\n\n        undoStepCreated = true\n      }\n\n      const actionTypes = actions.map((action) => action.type)\n      const uniqueActionTypes = new Set(actionTypes)\n\n      // The set of actions are all `raise` actions\n      const raiseGroup =\n        actionTypes.length > 1 &&\n        uniqueActionTypes.size === 1 &&\n        uniqueActionTypes.has('raise')\n\n      // The set of actions are all `execute` actions\n      const executeGroup =\n        actionTypes.length > 1 &&\n        uniqueActionTypes.size === 1 &&\n        uniqueActionTypes.has('execute')\n\n      withoutNormalizingConditional(\n        editor,\n        () => raiseGroup || executeGroup,\n        () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              try {\n                action.effect({\n                  send: sendBack,\n                })\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: mode === 'execute' ? 'execute' : 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              performEvent({\n                mode: mode === 'execute' ? 'execute' : 'raise',\n                behaviors,\n                remainingEventBehaviors:\n                  mode === 'execute' ? remainingEventBehaviors : behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n              sendBack,\n            })\n          }\n        },\n      )\n\n      if (undoStepCreated) {\n        clearUndoStep(editor)\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    if (mode === 'send') {\n      clearUndoStep(editor)\n    }\n\n    withPerformingBehaviorOperation(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  blockIndexMap: Map<string, number>\n  /**\n   * @beta\n   * Subject to change\n   */\n  decoratorState: Record<string, boolean | undefined>\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState,\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {\n  BehaviorEvent,\n  ExternalBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'set drag ghost'\n      ghost: HTMLElement\n    }\n  | {\n      type: 'dragstart'\n      ghost?: HTMLElement\n      origin: Pick<EventPosition, 'selection'>\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\nexport function rerouteExternalBehaviorEvent({\n  event,\n  slateEditor,\n}: {\n  event: ExternalBehaviorEvent\n  slateEditor: PortableTextSlateEditor\n}): InternalEditorEvent {\n  switch (event.type) {\n    case 'blur':\n      return {\n        type: 'blur',\n        editor: slateEditor,\n      }\n\n    case 'focus':\n      return {\n        type: 'focus',\n        editor: slateEditor,\n      }\n\n    case 'insert.block object':\n      return {\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: event.blockObject.name,\n            ...(event.blockObject.value ?? {}),\n          },\n          placement: event.placement,\n        },\n        editor: slateEditor,\n      }\n\n    default:\n      return {\n        type: 'behavior event',\n        behaviorEvent: event,\n        editor: slateEditor,\n      }\n  }\n}\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      behaviorsSorted: boolean\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        origin: Pick<EventPosition, 'selection'>\n      }\n      dragGhost?: HTMLElement\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n      behaviorsSorted: false,\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'internal.patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = [...context.behaviors.values()].map(\n          (config) => config.behavior,\n        )\n\n        performEvent({\n          mode: 'send',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n            }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (eventSentBack) => {\n            if (eventSentBack.type === 'set drag ghost') {\n              self.send(eventSentBack)\n              return\n            }\n\n            self.send(\n              rerouteExternalBehaviorEvent({\n                event: eventSentBack,\n                slateEditor: event.editor,\n              }),\n            )\n          },\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n    'sort behaviors': assign({\n      behaviors: ({context}) =>\n        !context.behaviorsSorted\n          ? new Set(sortByPriority([...context.behaviors.values()]))\n          : context.behaviors,\n      behaviorsSorted: true,\n    }),\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: false,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'set drag ghost': {\n      actions: assign({dragGhost: ({event}) => event.ghost}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.dragGhost) {\n                    try {\n                      context.dragGhost.parentNode?.removeChild(\n                        context.dragGhost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({dragGhost: undefined}),\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'emit changes'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return {type: 'patch' as const, patch: event.patch}\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation interval': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'emit changes'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 1000,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                raise({type: 'emit changes'}),\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n              actions: [raise({type: 'emit changes'})],\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation interval',\n          },\n          on: {\n            'emit changes': {\n              guard: and([not('is read-only'), 'slate is normalizing']),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import {isTextBlock} from '@portabletext/schema'\nimport type {\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {toSlateRange} from '../../internal-utils/to-slate-range'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {\n  getFocusBlock,\n  getFocusSpan,\n  getSelectedValue,\n  isActiveAnnotation,\n} from '../../selectors'\nimport {getActiveAnnotationsMarks} from '../../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return [...activeAnnotations, ...activeDecorators]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return isActiveAnnotation(annotationType)(snapshot)\n    },\n    addAnnotation: (type, value) => {\n      const snapshotBefore = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n      const selectedValueBefore = getSelectedValue(snapshotBefore)\n      const focusSpanBefore = getFocusSpan(snapshotBefore)\n      const markDefsBefore = selectedValueBefore.flatMap((block) => {\n        if (isTextBlock(snapshotBefore.context, block)) {\n          return block.markDefs ?? []\n        }\n\n        return []\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.add',\n          annotation: {name: type.name, value: value ?? {}},\n        },\n        editor,\n      })\n\n      const snapshotAfter = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const selectedValueAfter = getSelectedValue(snapshotAfter)\n      const focusBlockAfter = getFocusBlock(snapshotAfter)\n      const focusSpanAfter = getFocusSpan(snapshotAfter)\n\n      const newMarkDefKeysOnFocusSpan = focusSpanAfter?.node.marks?.filter(\n        (mark) =>\n          !focusSpanBefore?.node.marks?.includes(mark) &&\n          !snapshotAfter.context.schema.decorators\n            .map((decorator) => decorator.name)\n            .includes(mark),\n      )\n      const markDefsAfter = selectedValueAfter.flatMap((block) => {\n        if (isTextBlock(snapshotAfter.context, block)) {\n          return (\n            block.markDefs?.map((markDef) => ({\n              markDef,\n              path: [{_key: block._key}, 'markDefs', {_key: markDef._key}],\n            })) ?? []\n          )\n        }\n\n        return []\n      })\n      const markDefs = markDefsAfter.filter(\n        (markDef) =>\n          !markDefsBefore.some(\n            (markDefBefore) => markDefBefore._key === markDef.markDef._key,\n          ),\n      )\n      const spanPath = focusSpanAfter?.path\n      const markDef = markDefs.find((markDef) =>\n        newMarkDefKeysOnFocusSpan?.some(\n          (mark) => mark === markDef.markDef._key,\n        ),\n      )\n\n      if (focusBlockAfter && spanPath && markDef) {\n        return {\n          markDefPath: markDef.path,\n          markDefPaths: markDefs.map((markDef) => markDef.path),\n          spanPath,\n        }\n      }\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection,\n          },\n          blockIndexMap: editor.blockIndexMap,\n        })\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(\n              editorActor.getSnapshot().context,\n            )\n            editor.children = [placeholderBlock]\n            editor.value = [placeholderBlock]\n\n            buildIndexMaps(\n              {\n                schema: editorActor.getSnapshot().context.schema,\n                value: editor.value,\n              },\n              {\n                blockIndexMap: editor.blockIndexMap,\n                listIndexMap: editor.listIndexMap,\n              },\n            )\n          }\n\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n      const rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {assign, emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    context: {} as {\n      prevSelection: EditorSelection\n      lastEventWasFocused: boolean\n    },\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: false,\n  },\n  on: {\n    'focused': {\n      actions: [\n        assign({\n          lastEventWasFocused: true,\n        }),\n        emit(({event}) => event),\n      ],\n    },\n    'selection': [\n      {\n        guard: ({context}) => context.lastEventWasFocused,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n      {\n        guard: ({context, event}) => context.prevSelection !== event.selection,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n    ],\n    '*': {\n      actions: [\n        emit(({event}) => event),\n        assign({\n          lastEventWasFocused: false,\n        }),\n      ],\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  deleteText,\n  Editor,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = isProcessingLocalChanges || isChanging\n\n      debug('isBusy', {isBusy, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n\n                  if (!isValid) {\n                    break\n                  }\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n\n              if (!blockValid) {\n                break\n              }\n\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                deleteText(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {\n  compileSchemaDefinitionToPortableTextMemberSchemaTypes,\n  createPortableTextMemberSchemaTypes,\n  portableTextMemberSchemaTypesToSchema,\n} from '@portabletext/sanity-bridge'\nimport {compileSchema} from '@portabletext/schema'\nimport {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {createEditorDom} from './editor-dom'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine, rerouteExternalBehaviorEvent} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    dom: createEditorDom(\n      (event) => editorActor.send(event),\n      slateEditor.instance,\n    ),\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        default:\n          editorActor.send(\n            rerouteExternalBehaviorEvent({\n              event,\n              slateEditor: slateEditor.instance,\n            }),\n          )\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToPortableTextMemberSchemaTypes(\n        config.schemaDefinition,\n      )\n    : createPortableTextMemberSchemaTypes(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = config.schemaDefinition\n    ? compileSchema(config.schemaDefinition)\n    : portableTextMemberSchemaTypesToSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent} from './relay-machine'\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {\n  AddedAnnotationPaths,\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {eventToChange} from './event-to-change'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                {this.props.children}\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import type React from 'react'\nimport {useEffect, useState} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {eventToChange} from './event-to-change'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const [{internalEditor, portableTextEditor}] = useState(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = internalEditor.actors.relayActor.on(\n      '*',\n      (event) => {\n        const change = eventToChange(event)\n\n        if (change) {\n          portableTextEditor.change$.next(change)\n        }\n      },\n    )\n    unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor, portableTextEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              {props.children}\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n","import {startTransition, useContext, useEffect, useState} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const editorActor = useContext(EditorActorContext)\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  useEffect(() => {\n    const subscription = editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editorActor])\n\n  return selection\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","t0","t1","on","subscription","unsubscribe","useEffect","rootName","debug","debugWithName","name","namespace","enabled","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","getFocusBlock","selection","Editor","node","focus","path","slice","getFocusSpan","focusBlock","isTextBlock","isTextSpan","getSelectionStartBlock","selectionStartPoint","Range","start","getPointBlock","point","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlockPath","childIndex","at","focusChild","Node","getPointChild","blockPath","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","from","nodes","mode","match","n","some","isInline","blockObjects","blockObject","isListItemActive","listItem","selectedBlocks","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchor","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","eventNode","getEventNode","eventBlock","context","eventPositionBlock","getEventPositionBlock","eventSelection","getEventSelection","utils","eventSelectionFocusBlockKey","getBlockKeyFromSelectionPoint","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","getBoundingClientRect","pageY","top","lastBlock","lastBlockRef","bottom","elementRect","height","Math","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","snapshot","isEqualSelectionPoints","anchorPoint","toSlateSelectionPoint","focusPoint","selectionPoint","direction","blockIndex","blockIndexMap","get","getChildKeyFromSelectionPoint","spanSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","childPath","pathChild","isSpan","concat","min","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","RenderDefaultInlineObject","inlineObject","getDragSelection","dragSelection","selectors","draggingCollapsedSelection","draggedTextBlock","draggedSpan","selectionStartBlock","selectionEndBlock","createEditorPriority","config","id","defaultKeyGenerator","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","selected","useSelected","isCollapsed","focused","useSlateSelector","legacySchema","t3","schemaType","legacySchemaType","error","t4","t5","readOnly","t6","renderBlock","RenderBlock","t7","t8","t9","attributes","editorElementRef","RenderInlineObject","inlineObjectRef","useSlateStatic","inlineObjects","findPath","inlineObject_0","display","renderChild","RenderChild","annotations","RenderTextBlock","blockRef","editor_0","listIndexMap","listIndex","renderStyle","legacyStyleSchemaType","renderListItem","lists","list","legacyListItemSchemaType","level","t10","t11","t12","t13","t14","t15","t16","spellCheck","RenderListItem","RenderStyle","RenderElement","useSelector","_temp","_temp2","slateStatic","s_0","s","getLegacySchema","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","converters","keyGenerator","decoratorState","RenderSpan","spanRef","leaf","isSelectionCollapsed","focusedSpan","editorActorSnapshot_0","snapshot_0","spanSelection","isOverlappingSelection","parent_0","block_0","annotationMarkDefs","renderAnnotation","renderDecorator","decoratorSchemaTypes","decorators","uniq","filter","mark","includes","flatMap","mark_0","markDef_0","markDef","mark_1","legacyDecoratorSchemaType","dec","annotationMarkDef","legacyAnnotationSchemaType","_child","span","decorator","RenderAnnotation","RenderDecorator","PLACEHOLDER_STYLE","pointerEvents","left","right","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","PortableTextEditorContext","usePortableTextEditor","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","hotkeySegment","keyName","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","createWithHotkeys","portableTextEditor","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","Object","keys","forEach","cat","nativeEvent","preventDefault","possibleMark","behaviorEvent","possibleCommand","moveRangeByOperation","operation","Point","transform","equals","slateOperationCallback","input","sendBack","originalApply","apply","op","rangeDecorationsMachine","types","events","assign","pendingRangeDecorations","rangeDecorations","set up initial range decorations","rangeDecorationState","slateRange","isRange","onMoved","newSelection","origin","decoratedRanges","update range decorations","move range decorations","decoratedRange","newRange","newRangeSelection","decorate","fn","createDecorate","actors","fromCallback","guards","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","payload","newRangeDecorations","not read only","should skip setup","skipSetup","createMachine","invoke","src","initial","states","always","and","entry","_","Path","intersection","RelayActorContext","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onBlur","onClick","onCopy","onCut","onDrag","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDragStart","onDrop","onFocus","onPaste","propsSelection","restProps","scrollSelectionIntoView","hasInvalidValue","setHasInvalidValue","relayActor","useSlate","rangeDecorationsActor","useActorRef","bb0","eProps","renderElement","leafProps","renderLeaf","renderText","_temp3","JSON","stringify","normalizedSelection","Transforms","select","operations","_temp4","onChange","restoreSelectionFromProps","onReady","onInvalidValue","onValueChanged","clipboardData","stopPropagation","originEvent","dataTransfer","handleCopy","t17","event_0","selection_0","position_0","handleCut","t18","event_1","onPasteResult","Promise","resolve","then","result_1","result","insert","selection_1","position_1","blocks","parseBlocks","options","removeUnusedMarkDefs","validateFields","placement","catch","_temp5","finally","selection_2","position_2","handlePaste","t19","event_2","isDefaultPrevented","handleOnFocus","t20","event_3","isPropagationStopped","position_3","handleClick","t21","event_4","handleOnBlur","t22","event_5","handleOnBeforeInput","t23","event_6","onKeyDown","handleKeyDown","t24","event_7","onKeyUp","handleKeyUp","t25","bb1","noop","t26","_editor","scrollSelectionIntoViewToSlate","t27","ReactEditor","onDragEnd_0","onDrop_0","addEventListener","removeEventListener","t28","event_8","position_4","handleDragStart","t29","event_9","handleDrag","t30","event_10","handleDragEnd","t31","event_11","position_6","handleDragEnter","t32","event_12","position_7","internalDrag","handleDragOver","t33","event_13","position_8","handleDrop","t34","event_14","handleDragLeave","t35","current","mutationObserver","MutationObserver","validateSelection","observe","attributeOldValue","characterData","childList","subtree","disconnect","callbackRef","t36","SlateEditable","className","displayName","activeElement","root","findDocumentOrShadowRoot","domSelection","getSelection","rangeCount","existingDOMRange","getRangeAt","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","props_0","o","forEachActor","actorRef","callback","values","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converter","reason","deserialize","converterPortableText","data","parse","parsedBlocks","parsedBlock","parseBlock","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","line","entityMap","str","String","createCoreConverters","compileType","rawType","Schema","compile","levelIndexMaps","Map","buildIndexMaps","clear","previousListItem","set","levelIndexMap","levelsToDelete","delete","levelCounter","createPlaceholderBlock","getPreviousSpan","spanPath","previousSpan","reverse","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","prev","isChangingRemotely","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","def","markDefKeys","newMarkDefs","has","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","insertNodes","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","markState","getMarkState","state","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","getActiveDecorators","targetBlock","targetPath","oldDefs","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","getCurrentUndoStepId","undoStepId","createUndoStep","clearUndoStep","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","findIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","annotationKey","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","location","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","childSetOperationImplementation","childEntry","definition","fields","field","childUnsetOperationImplementation","newNode","newValue","applyAll","decoratorAddOperationImplementation","manualAnchor","manualFocus","manualSelection","editorSelection","anchorOffset","focusOffset","offsets","trimmedSelection","splitTextNodes","existingMarks","deleteOperationImplementation","anchorBlockKey","focusBlockKey","startBlockKey","endBlockKey","startBlockIndex","startBlock","endBlockIndex","endBlock","unit","removeNodes","parentBlockEntry","above","isBlock","parentBlockPath","parentElementRange","currentLineRange","findCurrentLineRange","deleteText","setSelection","parentRange","parentRangeBoundary","positions","middle","floor","rangesAreOnSameLine","range1","range2","rect1","rect2","domRectsIntersect","rect","compareRect","insertBlockOperationImplementation","fragment","insertBlock","startBlockPath","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockChildKeys","endBlockMarkDefsKeys","markDefKeyMap","adjustedMarkDefs","newKey","adjustedChildren","adjustedBlock","endBlockStartPoint","isEmptyTextBlock","splitNodes","insertChildOperationImplementation","focusBlockIndex","focusChildIndex","parseSpan","EDITOR_TO_PENDING_SELECTION","parseInlineObject","insertTextOperationImplementation","insertText","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","originKey","originBlockIndex","destinationKey","to","destinationBlockIndex","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","IS_FOCUSED","IS_READ_ONLY","behaviorOperationImplementations","performOperation","message","IS_PERFORMING_OPERATION","withPerformingBehaviorOperation","isPerformingBehaviorOperation","createWithEventListeners","maxBlocks","editorDelete","deleteBackward","deleteForward","insertBreak","insertData","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","prevPath","previous","prevIndex","previousBlock","previousBlockChildKeys","previousBlockMarkDefKeys","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","reservedProps","nextRest","_prevChildren","prevRest","blockNode","newVal","previousSelection","pteCreateTextBlock","newKeys","removedProperties","property","unsetNodes","isMatch","isKeyedSegment","insertTextPatch","beforeValue","textChild","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","val","indexOf","insertNodePatch","targetKey","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","isLonelyBlock","isBlockObject","insertNode","createWithSchemaTypes","isVoid","obj","createWithUtils","pluginUpdateSelection","updateSelection","existingSelection","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","applyOperationToPortableTextDraft","e","finishDraft","insertedNode","before","after","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPlaceholderBlock","withUtils","createSlateEditor","withReact","createEditor","placeholderBlock","initialValue","createEditorDom","getBlockNodes","getChildNodes","setDragGhost","ghost","childNode","setDragImage","x","y","addAnnotationOnCollapsedSelection","caretWordSelection","raise","preventOverlappingAnnotations","coreAnnotationBehaviors","defaultKeyboardShortcuts","arrowDown","createKeyboardShortcut","default","arrowUp","backspace","lineBreak","strong","bold","em","italic","underline","tab","shiftTab","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","getCompoundClientRect","DOMRect","elements","firstRect","i","max","coreDndBehaviors","dom","selectingEntireBlocks","draggedDomNodes","blockNodes","childNodes","dragGhost","createElement","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","blocksDomRect","clonedChildNodes","childrenDomRect","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","coreInsertBehaviors","activeDecorators","activeAnnotations","getActiveAnnotationsMarks","markStateDecorators","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","breakingInlineObject","focusInlineObject","coreInsertBreakBehaviors","isAtTheBeginningOfBlock","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","mergeTextIntoListOnDelete","focusListBlock","mergeTextIntoListOnBackspace","previousBlockEndPoint","getBlockEndPoint","deletingListFromStart","blocksToDelete","middleBlocks","deleteStartPoint","deleteEndPoint","getBlockStartPoint","startBlockEndPoint","slicedEndBlock","sliceTextBlock","clearListOnEnter","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","inheritListLevel","firstInsertedBlock","secondInsertedBlock","insertedListBlock","levelDifference","adjustLevel","listStartBlockFound","inheritListItem","adjustListItem","inheritListProperties","coreListBehaviors","coreBehaviorsConfig","withoutNormalizingConditional","predicate","abstractAnnotationBehaviors","markDefKey","updatedMarkDefs","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","nextBlockStartPoint","abstractDeserializeBehaviors","getData","json","deserializeEvent","textRuns","getTextBlockText","textRun","deserializeDataEvent","abstractInsertBehaviors","onlyBlock","firstBlockKey","lastBlockKey","getFocusTextBlock","focusBlockStartPoint","focusBlockEndPoint","focusTextBlockAfter","shiftLeft","abstractKeyboardBehaviors","getFocusInlineObject","isSelectionExpanded","getPreviousBlock","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getNextBlock","abstractSelectBehaviors","blockEndPoint","abstractSerializeBehaviors","serializeEvent","setData","abstractSplitBehaviors","startPoint","endPoint","blocksInBetween","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","abstractBehaviors","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","eventBehaviors","listenedNamespace","eventNamespace","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSetIndex","actionSet","actionsSnapshot","action","undoStepCreated","actionTypes","uniqueActionTypes","raiseGroup","size","executeGroup","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","rerouteExternalBehaviorEvent","editorMachine","emitted","tags","assertEvent","behaviorsSorted","emit","pendingEvents","enqueueActions","enqueue","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","eventSentBack","slate is busy","initialReadOnly","exit","dragstart","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","slate is normalizing","isNormalizing","delays","typing","reenter","mutations","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","spans","isAnnotationActive","annotationType","addAnnotation","snapshotBefore","selectedValueBefore","getSelectedValue","focusSpanBefore","markDefsBefore","snapshotAfter","selectedValueAfter","focusBlockAfter","focusSpanAfter","newMarkDefKeysOnFocusSpan","markDefBefore","markDefPath","markDefPaths","SlateElement","removeAnnotation","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","relayMachine","prevSelection","lastEventWasFocused","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","m","toString","orphanedMarks","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","updateValue","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","editable","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","compileSchemaDefinitionToPortableTextMemberSchemaTypes","createPortableTextMemberSchemaTypes","compileSchema","portableTextMemberSchemaTypesToSchema","subscribe","eventToChange","isLoading","PortableTextEditor","Component","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","change","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","blockStyle","listStyle","isObjectPath","isChildObjectEditPath","RoutePatchesObservableToEditorActor","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","usePortableTextEditorSelection","startTransition"],"mappings":"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","x_google_ignoreList":[44]}