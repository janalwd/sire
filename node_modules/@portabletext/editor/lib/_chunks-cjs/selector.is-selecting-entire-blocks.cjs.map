{"version":3,"file":"selector.is-selecting-entire-blocks.cjs","sources":["../../src/types/paths.ts","../../src/utils/util.is-selection-expanded.ts","../../src/selectors/selector.get-selection-end-block.ts","../../src/selectors/selector.get-selection-end-point.ts","../../src/selectors/selector.get-next-span.ts","../../src/selectors/selector.get-selection-start-block.ts","../../src/selectors/selector.get-previous-span.ts","../../src/selectors/selector.get-selected-spans.ts","../../src/selectors/selector.get-mark-state.ts","../../src/selectors/selector.get-selected-blocks.ts","../../src/selectors/selector.get-active-annotations.ts","../../src/selectors/selector.get-active-list-item.ts","../../src/selectors/selector.get-active-style.ts","../../src/selectors/selector.get-next-inline-object.ts","../../src/selectors/selector.get-caret-word-selection.ts","../../src/selectors/selector.get-first-block.ts","../../src/selectors/selector.get-focus-block-object.ts","../../src/selectors/selector.get-focus-inline-object.ts","../../src/selectors/selector.get-focus-list-block.ts","../../src/selectors/selector.get-last-block.ts","../../src/selectors/selector.get-next-block.ts","../../src/selectors/selector.get-previous-block.ts","../../src/selectors/selector.get-selected-text-blocks.ts","../../src/selectors/selector.get-trimmed-selection.ts","../../src/selectors/selector.get-active-annotation-marks.ts","../../src/selectors/selector.is-active-annotation.ts","../../src/selectors/selector.get-active-decorators.ts","../../src/selectors/selector.is-active-decorator.ts","../../src/selectors/selector.is-active-list-item.ts","../../src/selectors/selector.is-active-style.ts","../../src/selectors/selector.is-at-the-end-of-block.ts","../../src/selectors/selector.is-at-the-start-of-block.ts","../../src/selectors/selector.is-point-after-selection.ts","../../src/selectors/selector.is-point-before-selection.ts","../../src/selectors/selector.is-overlapping-selection.ts","../../src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import type {Path} from '@sanity/types'\nimport {isRecord} from '../internal-utils/asserters'\n\n/**\n * @public\n */\nexport type BlockPath = [{_key: string}]\n\n/**\n * @public\n */\nexport function isBlockPath(path: Path): path is BlockPath {\n  const firstSegment = path.at(0)\n\n  return (\n    path.length === 1 &&\n    firstSegment !== undefined &&\n    isRecord(firstSegment) &&\n    '_key' in firstSegment &&\n    typeof firstSegment._key === 'string'\n  )\n}\n\n/**\n * @public\n */\nexport type AnnotationPath = [{_key: string}, 'markDefs', {_key: string}]\n\n/**\n * @public\n */\nexport type ChildPath = [{_key: string}, 'children', {_key: string}]\n","import type {EditorSelection} from '../types/editor'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isSelectionExpanded(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return !isSelectionCollapsed(selection)\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  if (!endPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: endPoint,\n        focus: endPoint,\n      },\n    },\n  })\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n\n  if (!selectionEndBlock || !selectionEndPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionEndBlock.node)) {\n    return undefined\n  }\n\n  const selectionEndPointChildKey =\n    getChildKeyFromSelectionPoint(selectionEndPoint)\n\n  let endPointChildFound = false\n  let nextSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (isSpan(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n\n  if (!startPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n\n  if (!selectionStartBlock || !selectionStartPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionStartBlock.node)) {\n    return undefined\n  }\n\n  const selectionStartPointChildKey =\n    getChildKeyFromSelectionPoint(selectionStartPoint)\n\n  let previousSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (isSpan(snapshot.context, child)) {\n      previousSpan = {\n        node: child,\n        path: [...selectionStartBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return previousSpan\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {ChildPath} from '../types/paths'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return selectedSpans\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const startSpanKey = getChildKeyFromSelectionPoint(startPoint)\n  const endSpanKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedSpans\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isBlockPath} from '../types/paths'\nimport {blockOffsetToSpanSelectionPoint} from '../utils'\nimport {isSelectionExpanded} from '../utils/util.is-selection-expanded'\nimport {getFocusSpan} from './selector.get-focus-span'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextSpan} from './selector.get-next-span'\nimport {getPreviousSpan} from './selector.get-previous-span'\nimport {getSelectedSpans} from './selector.get-selected-spans'\n\nexport type MarkState =\n  | {\n      state: 'unchanged'\n      marks: Array<string>\n    }\n  | {\n      state: 'changed'\n      marks: Array<string>\n      previousMarks: Array<string>\n    }\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n * @beta\n */\nexport const getMarkState: EditorSelector<MarkState | undefined> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  let selection = snapshot.context.selection\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  if (!focusTextBlock) {\n    return undefined\n  }\n\n  if (isBlockPath(selection.anchor.path)) {\n    const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n      context: snapshot.context,\n      blockOffset: {\n        path: selection.anchor.path,\n        offset: selection.anchor.offset,\n      },\n      direction: selection.backward ? 'backward' : 'forward',\n    })\n\n    selection = spanSelectionPoint\n      ? {\n          ...selection,\n          anchor: spanSelectionPoint,\n        }\n      : selection\n  }\n\n  if (isBlockPath(selection.focus.path)) {\n    const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n      context: snapshot.context,\n      blockOffset: {\n        path: selection.focus.path,\n        offset: selection.focus.offset,\n      },\n      direction: selection.backward ? 'backward' : 'forward',\n    })\n\n    selection = spanSelectionPoint\n      ? {\n          ...selection,\n          focus: spanSelectionPoint,\n        }\n      : selection\n  }\n\n  const focusSpan = getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection,\n    },\n  })\n\n  if (!focusSpan) {\n    return undefined\n  }\n\n  if (isSelectionExpanded(selection)) {\n    const selectedSpans = getSelectedSpans({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const span of selectedSpans) {\n      if (index === 0) {\n        marks = span.node.marks ?? []\n      } else {\n        if (span.node.marks?.length === 0) {\n          marks = []\n          continue\n        }\n\n        marks = marks.filter((mark) =>\n          (span.node.marks ?? []).some((spanMark) => spanMark === mark),\n        )\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = snapshot.context.schema.decorators.map(\n    (decorator) => decorator.name,\n  )\n  const marks = focusSpan.node.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = focusSpan.node.text.length === 0\n\n  const atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0\n  const atTheEndOfSpan =\n    snapshot.context.selection.anchor.offset === focusSpan.node.text.length\n\n  const previousSpan = getPreviousSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection,\n    },\n  })\n  const nextSpan = getNextSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection,\n    },\n  })\n  const nextSpanAnnotations =\n    nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.node.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.node.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.node.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          previousMarks: marks,\n          marks: focusSpan.node.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: nextSpan?.node.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        previousMarks: previousSpan.node.marks ?? [],\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        previousMarks: marks,\n        marks: (previousSpan?.node.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks,\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: BlockPath}> = []\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getMarkState} from './selector.get-mark-state'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const markState = getMarkState(snapshot)\n\n  const activeAnnotations = (markState?.marks ?? []).filter(\n    (mark) =>\n      !snapshot.context.schema.decorators\n        .map((decorator) => decorator.name)\n        .includes(mark),\n  )\n\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isTextBlock(snapshot.context, block.node)\n      ? (block.node.markDefs ?? [])\n      : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    activeAnnotations.includes(markDef._key),\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {isSpan} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils/util.block-offset'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import {isPortableTextSpan, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  {node: PortableTextObject; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  return focusTextBlock && isListBlock(snapshot.context, focusTextBlock.node)\n    ? {node: focusTextBlock.node, path: focusTextBlock.path}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key)\n\n  if (index === undefined || index === snapshot.context.value.length - 1) {\n    return undefined\n  }\n\n  const nextBlock = snapshot.context.value.at(index + 1)\n\n  return nextBlock\n    ? {node: nextBlock, path: [{_key: nextBlock._key}]}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key)\n\n  if (index === undefined || index === 0) {\n    return undefined\n  }\n\n  const previousBlock = snapshot.context.value.at(index - 1)\n\n  return previousBlock\n    ? {node: previousBlock, path: [{_key: previousBlock._key}]}\n    : undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint, getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: BlockPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedTextBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedTextBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {\n  getSelectionEndPoint,\n  getSelectionStartPoint,\n  isEmptyTextBlock,\n} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return snapshot.context.selection\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (\n        isTextBlock(snapshot.context, block) &&\n        isEmptyTextBlock(snapshot.context, block)\n      ) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (\n      block._key === endBlockKey &&\n      isEmptyTextBlock(snapshot.context, block)\n    ) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isSpan(snapshot.context, child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isSpan(snapshot.context, child) && block.children.length === 1\n\n        if (\n          (isSpan(snapshot.context, child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isSpan(snapshot.context, child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isSpan(snapshot.context, child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (\n      focusTextBlock &&\n      !isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n    ) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveAnnotationsMarks(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const markState = getMarkState(snapshot)\n\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveAnnotationsMarks} from './selector.get-active-annotation-marks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\nimport {getSelectedValue} from './selector.get-selected-value'\n\n/**\n * Check whether an annotation is active in the given `snapshot`.\n *\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n  options?: {\n    /**\n     * Choose whether the annotation has to take up the entire selection in the\n     * `snapshot` or if the annotation can be partially selected.\n     *\n     * Defaults to 'full'\n     */\n    mode?: 'partial' | 'full'\n  },\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    const mode = options?.mode ?? 'full'\n\n    if (mode === 'partial') {\n      const selectedValue = getSelectedValue(snapshot)\n\n      const selectionMarkDefs = selectedValue.flatMap((block) =>\n        isTextBlock(snapshot.context, block) ? (block.markDefs ?? []) : [],\n      )\n\n      return selectionMarkDefs.some((markDef) => markDef._type === annotation)\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isTextBlock(snapshot.context, block.node)\n        ? (block.node.markDefs ?? [])\n        : [],\n    )\n    const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n    const activeMarkDefs = selectionMarkDefs.filter(\n      (markDef) =>\n        markDef._type === annotation &&\n        activeAnnotations.includes(markDef._key),\n    )\n\n    return activeMarkDefs.length > 0\n  }\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveDecorators(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const decoratorState = snapshot.decoratorState\n  const markState = getMarkState(snapshot)\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveDecorators} from './selector.get-active-decorators'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    const activeDecorators = getActiveDecorators(snapshot)\n\n    return activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionEndPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const endPoint = getSelectionEndPoint(snapshot.context.selection)\n    const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n    const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n    const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n    if (pointBlockIndex === undefined || endBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex > endBlockIndex) {\n      // The point block is after the end block.\n      return true\n    }\n\n    if (pointBlockIndex < endBlockIndex) {\n      // The point block is before the end block.\n      return false\n    }\n\n    // The point block is the same as the end block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the end block, the point is not\n      // after the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let endChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the end block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === endChildKey) {\n        return point.offset > endPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === endChildKey) {\n        endChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && endChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || endChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex > endChildIndex\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const startPoint = getSelectionStartPoint(snapshot.context.selection)\n    const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n    const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n\n    if (startBlockIndex === undefined || pointBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex < startBlockIndex) {\n      // The point block is before the start block.\n      return true\n    }\n\n    if (pointBlockIndex > startBlockIndex) {\n      // The point block is after the start block.\n      return false\n    }\n\n    // The point block is the same as the start block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the start block, the point is not\n      // before the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let startChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the start block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === startChildKey) {\n        return point.offset < startPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === startChildKey) {\n        startChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && startChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || startChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex < startChildIndex\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionStartPoint,\n    )\n    const endPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (\n      startPointEqualToOriginalStartPoint &&\n      endPointEqualToOriginalEndPoint\n    ) {\n      return true\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n\n    // If all checks fail then we can deduce that the selection does not exist\n    // and there doesn't overlap with the snapshot selection\n    if (\n      !endPointEqualToOriginalStartPoint &&\n      !startPointEqualToOriginalEndPoint &&\n      !originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return false\n    }\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint({\n    context: snapshot.context,\n    block: startBlock,\n  })\n  const endBlockEndPoint = utils.getBlockEndPoint({\n    context: snapshot.context,\n    block: endBlock,\n  })\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["isBlockPath","path","firstSegment","at","length","undefined","isRecord","_key","isSelectionExpanded","selection","isSelectionCollapsed","getSelectionEndBlock","snapshot","endPoint","getSelectionEndPoint","context","getFocusBlock","anchor","focus","backward","getNextSpan","selectionEndBlock","selectionEndPoint","isTextBlock","node","selectionEndPointChildKey","getChildKeyFromSelectionPoint","endPointChildFound","nextSpan","child","children","isSpan","getSelectionStartBlock","startPoint","getSelectionStartPoint","getPreviousSpan","selectionStartBlock","selectionStartPoint","selectionStartPointChildKey","previousSpan","getSelectedSpans","selectedSpans","startBlockKey","getBlockKeyFromSelectionPoint","endBlockKey","startSpanKey","endSpanKey","startBlockIndex","blockIndexMap","get","endBlockIndex","slicedValue","value","slice","startBlockFound","block","offset","text","push","getMarkState","getFocusTextBlock","spanSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","focusSpan","getFocusSpan","index","marks","span","filter","mark","some","spanMark","state","decorators","schema","map","decorator","name","marksWithoutAnnotations","includes","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","nextSpanAnnotations","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","every","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","previousMarks","getSelectedBlocks","selectedBlocks","startKey","endKey","getActiveAnnotations","activeAnnotations","flatMap","markDefs","markDef","getActiveListItem","selectedTextBlocks","firstTextBlock","firstListItem","listItem","getActiveStyle","firstStyle","style","getNextInlineObject","focusTextBlock","isKeySegment","inlineObject","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","getPreviousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","getSelectionText","split","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","caretWordEndSelectionPoint","caretWordSelection","getFirstBlock","getFocusBlockObject","focusBlock","getFocusInlineObject","focusChild","getFocusChild","isPortableTextSpan","getFocusListBlock","isListBlock","getLastBlock","getNextBlock","nextBlock","getPreviousBlock","previousBlock","getSelectedTextBlocks","getTrimmedSelection","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","lonelySpan","trimmedSelection","getActiveAnnotationsMarks","isActiveAnnotation","annotation","options","mode","getSelectedValue","_type","selectionMarkDefs","getActiveDecorators","decoratorState","markState","activeDecorators","activeDecorator","isActiveDecorator","isActiveListItem","isActiveStyle","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","pointBlockKey","pointChildKey","pointBlockIndex","pointBlock","pointChildIndex","endChildIndex","childIndex","isPointBeforeSelection","startChildIndex","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointEqualToOriginalStartPoint","isEqualSelectionPoints","endPointEqualToOriginalEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","startPointEqualToOriginalEndPoint","endPointEqualToOriginalStartPoint","isSelectingEntireBlocks","startBlock","endBlock","startBlockStartPoint","endBlockEndPoint"],"mappings":";;AAWO,SAASA,YAAYC,MAA+B;AACzD,QAAMC,eAAeD,KAAKE,GAAG,CAAC;AAE9B,SACEF,KAAKG,WAAW,KAChBF,iBAAiBG,UACjBC,iBAAAA,SAASJ,YAAY,KACrB,UAAUA,gBACV,OAAOA,aAAaK,QAAS;AAEjC;ACfO,SAASC,oBAAoBC,WAA4B;AAC9D,SAAKA,YAIE,CAACC,+CAAqBD,SAAS,IAH7B;AAIX;ACHO,MAAME,uBAMRC,CAAAA,aAAa;AAChB,QAAMC,WAAWC,iBAAAA,qBAAqBF,SAASG,QAAQN,SAAS;AAEhE,MAAKI;AAIL,WAAOG,2CAAc;AAAA,MACnB,GAAGJ;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAW;AAAA,UACTQ,QAAQJ;AAAAA,UACRK,OAAOL;AAAAA,QAAAA;AAAAA,MACT;AAAA,IACF,CACD;AACH,GC1BaC,uBAERF,CAAAA,aAAa;AAChB,MAAKA,SAASG,QAAQN;AAItB,WAAOG,SAASG,QAAQN,UAAUU,WAC9BP,SAASG,QAAQN,UAAUQ,SAC3BL,SAASG,QAAQN,UAAUS;AACjC,GCNaE,cAMRR,CAAAA,aAAa;AAChB,QAAMS,oBAAoBV,qBAAqBC,QAAQ,GACjDU,oBAAoBR,qBAAqBF,QAAQ;AAMvD,MAJI,CAACS,qBAAqB,CAACC,qBAIvB,CAACC,OAAAA,YAAYX,SAASG,SAASM,kBAAkBG,IAAI;AACvD;AAGF,QAAMC,4BACJC,iBAAAA,8BAA8BJ,iBAAiB;AAEjD,MAAIK,qBAAqB,IACrBC;AAOJ,aAAWC,SAASR,kBAAkBG,KAAKM,UAAU;AACnD,QAAID,MAAMtB,SAASkB,2BAA2B;AAC5CE,2BAAqB;AACrB;AAAA,IACF;AAEA,QAAII,OAAAA,OAAOnB,SAASG,SAASc,KAAK,KAAKF,oBAAoB;AACzDC,iBAAW;AAAA,QACTJ,MAAMK;AAAAA,QACN5B,MAAM,CAAC,GAAGoB,kBAAkBpB,MAAM,YAAY;AAAA,UAACM,MAAMsB,MAAMtB;AAAAA,QAAAA,CAAK;AAAA,MAAA;AAElE;AAAA,IACF;AAAA,EACF;AAEA,SAAOqB;AACT,GC9CaI,yBAMRpB,CAAAA,aAAa;AAChB,QAAMqB,aAAaC,iBAAAA,uBAAuBtB,SAASG,QAAQN,SAAS;AAEpE,MAAKwB;AAIL,WAAOjB,2CAAc;AAAA,MACnB,GAAGJ;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAW;AAAA,UACTQ,QAAQgB;AAAAA,UACRf,OAAOe;AAAAA,QAAAA;AAAAA,MACT;AAAA,IACF,CACD;AACH,GCtBaE,kBAMRvB,CAAAA,aAAa;AAChB,QAAMwB,sBAAsBJ,uBAAuBpB,QAAQ,GACrDyB,sBAAsBH,6BAAAA,uBAAuBtB,QAAQ;AAM3D,MAJI,CAACwB,uBAAuB,CAACC,uBAIzB,CAACd,OAAAA,YAAYX,SAASG,SAASqB,oBAAoBZ,IAAI;AACzD;AAGF,QAAMc,8BACJZ,iBAAAA,8BAA8BW,mBAAmB;AAEnD,MAAIE;AAOJ,aAAWV,SAASO,oBAAoBZ,KAAKM,UAAU;AACrD,QAAID,MAAMtB,SAAS+B;AACjB;AAGEP,WAAAA,OAAOnB,SAASG,SAASc,KAAK,MAChCU,eAAe;AAAA,MACbf,MAAMK;AAAAA,MACN5B,MAAM,CAAC,GAAGmC,oBAAoBnC,MAAM,YAAY;AAAA,QAACM,MAAMsB,MAAMtB;AAAAA,MAAAA,CAAK;AAAA,IAAA;AAAA,EAGxE;AAEA,SAAOgC;AACT,GCtCaC,mBAKR5B,CAAAA,aAAa;AAChB,MAAI,CAACA,SAASG,QAAQN;AACpB,WAAO,CAAA;AAGT,QAAMgC,gBAGD,CAAA,GAECR,aAAaC,6BAAAA,uBAAuBtB,QAAQ,GAC5CC,WAAWC,qBAAqBF,QAAQ;AAE9C,MAAI,CAACqB,cAAc,CAACpB;AAClB,WAAO4B;AAGT,QAAMC,gBAAgBC,iBAAAA,8BAA8BV,UAAU,GACxDW,cAAcD,iBAAAA,8BAA8B9B,QAAQ,GACpDgC,eAAenB,iBAAAA,8BAA8BO,UAAU,GACvDa,aAAapB,iBAAAA,8BAA8Bb,QAAQ;AAEzD,MAAI,CAAC6B,iBAAiB,CAACE;AACrB,WAAOH;AAGT,QAAMM,kBAAkBnC,SAASoC,cAAcC,IAAIP,aAAa,GAC1DQ,gBAAgBtC,SAASoC,cAAcC,IAAIL,WAAW;AAE5D,MAAIG,oBAAoB1C,UAAa6C,kBAAkB7C;AACrD,WAAOoC;AAGT,QAAMU,cAAcvC,SAASG,QAAQqC,MAAMC,MACzCN,iBACAG,gBAAgB,CAClB;AAEA,MAAII,kBAAkB;AAEtB,aAAWC,SAASJ;AAKlB,QAJII,MAAMhD,SAASmC,kBACjBY,kBAAkB,KAGhB,EAAC/B,mBAAYX,SAASG,SAASwC,KAAK,GAIxC;AAAA,UAAIA,MAAMhD,SAASmC,eAAe;AAChC,mBAAWb,SAAS0B,MAAMzB;AACxB,cAAKC,cAAOnB,SAASG,SAASc,KAAK,GAInC;AAAA,gBAAIgB,gBAAgBhB,MAAMtB,SAASsC,cAAc;AAQ/C,kBAPIZ,WAAWuB,SAAS3B,MAAM4B,KAAKrD,UACjCqC,cAAciB,KAAK;AAAA,gBACjBlC,MAAMK;AAAAA,gBACN5B,MAAM,CAAC;AAAA,kBAACM,MAAMgD,MAAMhD;AAAAA,gBAAAA,GAAO,YAAY;AAAA,kBAACA,MAAMsB,MAAMtB;AAAAA,gBAAAA,CAAK;AAAA,cAAA,CAC1D,GAGCsC,iBAAiBC;AACnB;AAGF;AAAA,YACF;AAEA,gBAAIA,cAAcjB,MAAMtB,SAASuC,YAAY;AACvCjC,uBAAS2C,SAAS,KACpBf,cAAciB,KAAK;AAAA,gBACjBlC,MAAMK;AAAAA,gBACN5B,MAAM,CAAC;AAAA,kBAACM,MAAMgD,MAAMhD;AAAAA,gBAAAA,GAAO,YAAY;AAAA,kBAACA,MAAMsB,MAAMtB;AAAAA,gBAAAA,CAAK;AAAA,cAAA,CAC1D;AAEH;AAAA,YACF;AAEIkC,0BAAcrC,SAAS,KACzBqC,cAAciB,KAAK;AAAA,cACjBlC,MAAMK;AAAAA,cACN5B,MAAM,CAAC;AAAA,gBAACM,MAAMgD,MAAMhD;AAAAA,cAAAA,GAAO,YAAY;AAAA,gBAACA,MAAMsB,MAAMtB;AAAAA,cAAAA,CAAK;AAAA,YAAA,CAC1D;AAAA,UAAA;AAIL,YAAImC,kBAAkBE;AACpB;AAGF;AAAA,MACF;AAEA,UAAIW,MAAMhD,SAASqC,aAAa;AAC9B,mBAAWf,SAAS0B,MAAMzB;AACxB,cAAKC,cAAOnB,SAASG,SAASc,KAAK,GAInC;AAAA,gBAAIiB,cAAcjB,MAAMtB,SAASuC,YAAY;AACvCjC,uBAAS2C,SAAS,KACpBf,cAAciB,KAAK;AAAA,gBACjBlC,MAAMK;AAAAA,gBACN5B,MAAM,CAAC;AAAA,kBAACM,MAAMgD,MAAMhD;AAAAA,gBAAAA,GAAO,YAAY;AAAA,kBAACA,MAAMsB,MAAMtB;AAAAA,gBAAAA,CAAK;AAAA,cAAA,CAC1D;AAEH;AAAA,YACF;AAEAkC,0BAAciB,KAAK;AAAA,cACjBlC,MAAMK;AAAAA,cACN5B,MAAM,CAAC;AAAA,gBAACM,MAAMgD,MAAMhD;AAAAA,cAAAA,GAAO,YAAY;AAAA,gBAACA,MAAMsB,MAAMtB;AAAAA,cAAAA,CAAK;AAAA,YAAA,CAC1D;AAAA,UAAA;AAGH;AAAA,MACF;AAEA,UAAI+C;AACF,mBAAWzB,SAAS0B,MAAMzB;AACnBC,iBAAAA,OAAOnB,SAASG,SAASc,KAAK,KAInCY,cAAciB,KAAK;AAAA,YACjBlC,MAAMK;AAAAA,YACN5B,MAAM,CAAC;AAAA,cAACM,MAAMgD,MAAMhD;AAAAA,YAAAA,GAAO,YAAY;AAAA,cAACA,MAAMsB,MAAMtB;AAAAA,YAAAA,CAAK;AAAA,UAAA,CAC1D;AAAA,IAAA;AAKP,SAAOkC;AACT,GChIakB,eACX/C,CAAAA,aACG;AACH,MAAI,CAACA,SAASG,QAAQN;AACpB;AAGF,MAAIA,YAAYG,SAASG,QAAQN;AAGjC,MAAI,CAFmBmD,6BAAAA,kBAAkBhD,QAAQ;AAG/C;AAGF,MAAIZ,YAAYS,UAAUQ,OAAOhB,IAAI,GAAG;AACtC,UAAM4D,qBAAqBC,iBAAAA,gCAAgC;AAAA,MACzD/C,SAASH,SAASG;AAAAA,MAClBgD,aAAa;AAAA,QACX9D,MAAMQ,UAAUQ,OAAOhB;AAAAA,QACvBuD,QAAQ/C,UAAUQ,OAAOuC;AAAAA,MAAAA;AAAAA,MAE3BQ,WAAWvD,UAAUU,WAAW,aAAa;AAAA,IAAA,CAC9C;AAEDV,gBAAYoD,qBACR;AAAA,MACE,GAAGpD;AAAAA,MACHQ,QAAQ4C;AAAAA,IAAAA,IAEVpD;AAAAA,EACN;AAEA,MAAIT,YAAYS,UAAUS,MAAMjB,IAAI,GAAG;AACrC,UAAM4D,qBAAqBC,iBAAAA,gCAAgC;AAAA,MACzD/C,SAASH,SAASG;AAAAA,MAClBgD,aAAa;AAAA,QACX9D,MAAMQ,UAAUS,MAAMjB;AAAAA,QACtBuD,QAAQ/C,UAAUS,MAAMsC;AAAAA,MAAAA;AAAAA,MAE1BQ,WAAWvD,UAAUU,WAAW,aAAa;AAAA,IAAA,CAC9C;AAEDV,gBAAYoD,qBACR;AAAA,MACE,GAAGpD;AAAAA,MACHS,OAAO2C;AAAAA,IAAAA,IAETpD;AAAAA,EACN;AAEA,QAAMwD,YAAYC,6BAAAA,aAAa;AAAA,IAC7B,GAAGtD;AAAAA,IACHG,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN;AAAAA,IAAAA;AAAAA,EACF,CACD;AAED,MAAI,CAACwD;AACH;AAGF,MAAIzD,oBAAoBC,SAAS,GAAG;AAClC,UAAMgC,gBAAgBD,iBAAiB;AAAA,MACrC,GAAG5B;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN;AAAAA,MAAAA;AAAAA,IACF,CACD;AAED,QAAI0D,QAAQ,GACRC,SAAuB,CAAA;AAE3B,eAAWC,QAAQ5B,eAAe;AAChC,UAAI0B,UAAU;AACZC,iBAAQC,KAAK7C,KAAK4C,SAAS,CAAA;AAAA,WACtB;AACL,YAAIC,KAAK7C,KAAK4C,OAAOhE,WAAW,GAAG;AACjCgE,mBAAQ,CAAA;AACR;AAAA,QACF;AAEAA,iBAAQA,OAAME,OAAQC,CAAAA,UACnBF,KAAK7C,KAAK4C,SAAS,CAAA,GAAII,KAAMC,CAAAA,aAAaA,aAAaF,IAAI,CAC9D;AAAA,MACF;AAEAJ;AAAAA,IACF;AAEA,WAAO;AAAA,MACLO,OAAO;AAAA,MACPN,OAAAA;AAAAA,IAAAA;AAAAA,EAEJ;AAEA,QAAMO,aAAa/D,SAASG,QAAQ6D,OAAOD,WAAWE,IACnDC,CAAAA,cAAcA,UAAUC,IAC3B,GACMX,QAAQH,UAAUzC,KAAK4C,SAAS,CAAA,GAChCY,0BAA0BZ,MAAME,OAAQC,CAAAA,SAC5CI,WAAWM,SAASV,IAAI,CAC1B,GAEMW,qBAAqBd,MAAMhE,SAAS4E,wBAAwB5E,QAE5D+E,cAAclB,UAAUzC,KAAKiC,KAAKrD,WAAW,GAE7CgF,uBAAuBxE,SAASG,QAAQN,UAAUQ,OAAOuC,WAAW,GACpE6B,iBACJzE,SAASG,QAAQN,UAAUQ,OAAOuC,WAAWS,UAAUzC,KAAKiC,KAAKrD,QAE7DmC,eAAeJ,gBAAgB;AAAA,IACnC,GAAGvB;AAAAA,IACHG,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN;AAAAA,IAAAA;AAAAA,EACF,CACD,GACKmB,WAAWR,YAAY;AAAA,IAC3B,GAAGR;AAAAA,IACHG,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN;AAAAA,IAAAA;AAAAA,EACF,CACD,GACK6E,sBACJ1D,UAAUJ,MAAM4C,OAAOE,OAAQC,UAAS,CAACI,WAAWM,SAASV,IAAI,CAAC,KAAK,CAAA,GACnEgB,kBAAkBnB,MAAME,OAAQC,CAAAA,SAAS,CAACI,WAAWM,SAASV,IAAI,CAAC,GAEnEiB,6BAA6BjD,eAC/BA,aAAaf,KAAK4C,OAAOI,KAAMD,CAAAA,SAAS,CAACI,WAAWM,SAASV,IAAI,CAAC,IAClE,IACEkB,iCAAiClD,eACnCA,aAAaf,KAAK4C,OACdE,OAAQC,CAAAA,SAAS,CAACI,WAAWM,SAASV,IAAI,CAAC,EAC5CmB,MAAOnB,CAAAA,SAASH,MAAMa,SAASV,IAAI,CAAC,IACvC,IACEoB,gCAAgCpD,eAClCA,aAAaf,KAAK4C,OAAOI,KACtBD,CAAAA,SAAS,CAACI,WAAWM,SAASV,IAAI,KAAKH,MAAMa,SAASV,IAAI,CAC7D,IACA,IAEEqB,2BAA2BrD,eAC7BA,aAAaf,KAAK4C,OAAOsB,MAAOnB,CAAAA,SAASH,MAAMa,SAASV,IAAI,CAAC,IAC7D,IACEsB,gCAAgCN,gBAAgBf,KAAMD,CAAAA,SAC1De,qBAAqBL,SAASV,IAAI,CACpC;AAEA,MAAIW,sBAAsB,CAACC,aAAa;AACtC,QAAIC,sBAAsB;AACxB,UAAIQ;AACF,eAAO;AAAA,UACLlB,OAAO;AAAA,UACPoB,eAAe1B;AAAAA,UACfA,OAAO7B,cAAcf,KAAK4C,SAAS,CAAA;AAAA,QAAA;AAEhC,UAAIqB;AACT,eAAO;AAAA,UACLf,OAAO;AAAA,UACPoB,eAAe1B;AAAAA,UACfA,OAAO7B,cAAcf,KAAK4C,SAAS,CAAA;AAAA,QAAA;AAEhC,UAAIuB;AACT,eAAO;AAAA,UACLjB,OAAO;AAAA,UACPoB,eAAe1B;AAAAA,UACfA,OAAOH,UAAUzC,KAAK4C,SAAS,CAAA;AAAA,QAAA;AAE5B,UAAI,CAAC7B;AACV,eAAO;AAAA,UACLmC,OAAO;AAAA,UACPoB,eAAe1B;AAAAA,UACfA,OAAO,CAAA;AAAA,QAAA;AAAA,IAGb;AAEA,QAAIiB,gBAAgB;AAClB,UACGzD,YACCiE,iCACAP,oBAAoBlF,SAASmF,gBAAgBnF,UAC/C,CAACyF;AAED,eAAO;AAAA,UACLnB,OAAO;AAAA,UACPoB,eAAe1B;AAAAA,UACfA,OAAOxC,UAAUJ,KAAK4C,SAAS,CAAA;AAAA,QAAA;AAInC,UAAI,CAACxC;AACH,eAAO;AAAA,UACL8C,OAAO;AAAA,UACPoB,eAAe1B;AAAAA,UACfA,OAAO,CAAA;AAAA,QAAA;AAAA,IAGb;AAAA,EACF;AAEA,SAAIgB,wBAAwB,CAACD,eAAiB5C,eACxCiD,6BACK;AAAA,IACLd,OAAO;AAAA,IACPoB,eAAevD,aAAaf,KAAK4C,SAAS,CAAA;AAAA,IAC1CA,OAAO,CAAA;AAAA,EAAA,IAGF;AAAA,IACLM,OAAO;AAAA,IACPoB,eAAe1B;AAAAA,IACfA,QAAQ7B,cAAcf,KAAK4C,SAAS,CAAA,GAAIE,OAAQC,CAAAA,SAC9CI,WAAWM,SAASV,IAAI,CAC1B;AAAA,EAAA,IAKC;AAAA,IACLG,OAAO;AAAA,IACPN;AAAAA,EAAAA;AAEJ,GCnPa2B,oBAERnF,CAAAA,aAAa;AAChB,MAAI,CAACA,SAASG,QAAQN;AACpB,WAAO,CAAA;AAGT,QAAMuF,iBAAoE,CAAA,GACpE/D,aAAaC,iBAAAA,uBAAuBtB,SAASG,QAAQN,SAAS,GAC9DI,WAAWC,iBAAAA,qBAAqBF,SAASG,QAAQN,SAAS,GAC1DwF,WAAWtD,iBAAAA,8BAA8BV,UAAU,GACnDiE,SAASvD,iBAAAA,8BAA8B9B,QAAQ;AAErD,MAAI,CAACoF,YAAY,CAACC;AAChB,WAAOF;AAGT,QAAMjD,kBAAkBnC,SAASoC,cAAcC,IAAIgD,QAAQ,GACrD/C,gBAAgBtC,SAASoC,cAAcC,IAAIiD,MAAM;AAEvD,MAAInD,oBAAoB1C,UAAa6C,kBAAkB7C;AACrD,WAAO2F;AAGT,QAAM7C,cAAcvC,SAASG,QAAQqC,MAAMC,MACzCN,iBACAG,gBAAgB,CAClB;AAEA,aAAWK,SAASJ,aAAa;AAC/B,QAAII,MAAMhD,SAAS0F,UAAU;AAG3B,UAFAD,eAAetC,KAAK;AAAA,QAAClC,MAAM+B;AAAAA,QAAOtD,MAAM,CAAC;AAAA,UAACM,MAAMgD,MAAMhD;AAAAA,QAAAA,CAAK;AAAA,MAAA,CAAE,GAEzD0F,aAAaC;AACf;AAEF;AAAA,IACF;AAEA,QAAI3C,MAAMhD,SAAS2F,QAAQ;AACzBF,qBAAetC,KAAK;AAAA,QAAClC,MAAM+B;AAAAA,QAAOtD,MAAM,CAAC;AAAA,UAACM,MAAMgD,MAAMhD;AAAAA,QAAAA,CAAK;AAAA,MAAA,CAAE;AAC7D;AAAA,IACF;AAEIyF,mBAAe5F,SAAS,KAC1B4F,eAAetC,KAAK;AAAA,MAAClC,MAAM+B;AAAAA,MAAOtD,MAAM,CAAC;AAAA,QAACM,MAAMgD,MAAMhD;AAAAA,MAAAA,CAAK;AAAA,IAAA,CAAE;AAAA,EAEjE;AAEA,SAAOyF;AACT,GCnDaG,uBACXvF,CAAAA,aACG;AACH,MAAI,CAACA,SAASG,QAAQN;AACpB,WAAO,CAAA;AAGT,QAAMuF,iBAAiBD,kBAAkBnF,QAAQ,GAG3CwF,qBAFYzC,aAAa/C,QAAQ,GAEDwD,SAAS,CAAA,GAAIE,OAChDC,UACC,CAAC3D,SAASG,QAAQ6D,OAAOD,WACtBE,IAAKC,CAAAA,cAAcA,UAAUC,IAAI,EACjCE,SAASV,IAAI,CACpB;AAQA,SAN0ByB,eAAeK,QAAS9C,CAAAA,UAChDhC,OAAAA,YAAYX,SAASG,SAASwC,MAAM/B,IAAI,IACnC+B,MAAM/B,KAAK8E,YAAY,CAAA,IACxB,EACN,EAEyBhC,OAAQiC,aAC/BH,kBAAkBnB,SAASsB,QAAQhG,IAAI,CACzC;AACF,GC3BaiG,oBAER5F,CAAAA,aAAa;AAChB,MAAI,CAACA,SAASG,QAAQN;AACpB;AAIF,QAAMgG,qBADiBV,kBAAkBnF,QAAQ,EAAEiE,IAAKtB,CAAAA,UAAUA,MAAM/B,IAAI,EAClC8C,OAAQf,WAChDhC,OAAAA,YAAYX,SAASG,SAASwC,KAAK,CACrC,GAEMmD,iBAAiBD,mBAAmBtG,GAAG,CAAC;AAE9C,MAAI,CAACuG;AACH;AAGF,QAAMC,gBAAgBD,eAAeE;AAErC,MAAKD,iBAIDF,mBAAmBf,MAAOnC,CAAAA,UAAUA,MAAMqD,aAAaD,aAAa;AACtE,WAAOA;AAIX,GC7BaE,iBACXjG,CAAAA,aACG;AACH,MAAI,CAACA,SAASG,QAAQN;AACpB;AAIF,QAAMgG,qBADiBV,kBAAkBnF,QAAQ,EAAEiE,IAAKtB,CAAAA,UAAUA,MAAM/B,IAAI,EAClC8C,OAAQf,WAChDhC,OAAAA,YAAYX,SAASG,SAASwC,KAAK,CACrC,GAEMmD,iBAAiBD,mBAAmBtG,GAAG,CAAC;AAE9C,MAAI,CAACuG;AACH;AAGF,QAAMI,aAAaJ,eAAeK;AAElC,MAAKD,cAIDL,mBAAmBf,MAAOnC,CAAAA,UAAUA,MAAMwD,UAAUD,UAAU;AAChE,WAAOA;AAIX,GC3BaE,sBAMRpG,CAAAA,aAAa;AAChB,QAAMqG,iBAAiBrD,6BAAAA,kBAAkBhD,QAAQ,GAC3CU,oBAAoBR,qBAAqBF,QAAQ,GACjDa,4BACJH,qBAAqB4F,MAAAA,aAAa5F,kBAAkBrB,KAAK,CAAC,CAAC,IACvDqB,kBAAkBrB,KAAK,CAAC,EAAEM,OAC1BF;AAEN,MAAI,CAAC4G,kBAAkB,CAACxF;AACtB;AAGF,MAAIE,qBAAqB,IACrBwF;AAOJ,aAAWtF,SAASoF,eAAezF,KAAKM,UAAU;AAChD,QAAID,MAAMtB,SAASkB,2BAA2B;AAC5CE,2BAAqB;AACrB;AAAA,IACF;AAEA,QAAI,CAACI,OAAAA,OAAOnB,SAASG,SAASc,KAAK,KAAKF,oBAAoB;AAC1DwF,qBAAe;AAAA,QACb3F,MAAMK;AAAAA,QACN5B,MAAM,CAAC,GAAGgH,eAAehH,MAAM,YAAY;AAAA,UAACM,MAAMsB,MAAMtB;AAAAA,QAAAA,CAAK;AAAA,MAAA;AAE/D;AAAA,IACF;AAAA,EACF;AAEA,SAAO4G;AACT,GC9BaC,wBACXxG,CAAAA,aACG;AAKH,MAJI,CAACA,SAASG,QAAQN,aAIlB,CAACC,6BAAAA,qBAAqBE,QAAQ;AAChC,WAAO;AAGT,QAAMqG,iBAAiBrD,6BAAAA,kBAAkBhD,QAAQ,GAC3CyB,sBAAsBH,oDAAuBtB,QAAQ,GACrDyG,uBAAuBhF,sBACzBiF,iDAAgC;AAAA,IAC9BvG,SAASH,SAASG;AAAAA,IAClBwG,gBAAgBlF;AAAAA,EAAAA,CACjB,IACDhC;AAEJ,MAAI,CAAC4G,kBAAkB,CAAC5E,uBAAuB,CAACgF;AAC9C,WAAO;AAGT,QAAMG,uBAAuBC,6BAAAA,wBAAwB7G,QAAQ,GACvD8G,kBAAkBC,iBAAAA,mBAAmB;AAAA,IACzC5G,SAASH,SAASG;AAAAA,IAClBwC,OAAO0D;AAAAA,EAAAA,CACR,GAaKW,qBAZaC,8CAAiB;AAAA,IAClC,GAAGjH;AAAAA,IACHG,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN,WAAW;AAAA,QACTQ,QAAQuG,uBACJ;AAAA,UAACvH,MAAMuH,qBAAqBvH;AAAAA,UAAMuD,QAAQ;AAAA,QAAA,IAC1CkE;AAAAA,QACJxG,OAAOmB;AAAAA,MAAAA;AAAAA,IACT;AAAA,EACF,CACD,EACqCyF,MAAM,KAAK,EAAE3H,GAAG,EAAE,GAElD4H,mBAAmBf,oBAAoBpG,QAAQ,GAC/CoH,gBAAgBC,0BAAAA,iBAAiB;AAAA,IACrClH,SAASH,SAASG;AAAAA,IAClBwC,OAAO0D;AAAAA,EAAAA,CACR,GAaKiB,oBAZYL,8CAAiB;AAAA,IACjC,GAAGjH;AAAAA,IACHG,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN,WAAW;AAAA,QACTQ,QAAQoB;AAAAA,QACRnB,OAAO6G,mBACH;AAAA,UAAC9H,MAAM8H,iBAAiB9H;AAAAA,UAAMuD,QAAQ;AAAA,QAAA,IACtCwE;AAAAA,MAAAA;AAAAA,IACN;AAAA,EACF,CACD,EACmCF,MAAM,KAAK,EAAE3H,GAAG,CAAC;AAErD,OACGyH,uBAAuBvH,UAAauH,uBAAuB,QAC3DM,sBAAsB7H,UAAa6H,sBAAsB;AAE1D,WAAO;AAGT,QAAMC,uBAAoCP,qBACtC;AAAA,IACE,GAAGP;AAAAA,IACH7D,QAAQ6D,qBAAqB7D,SAASoE,mBAAmBxH;AAAAA,EAAAA,IAE3DiH,sBACEe,qBAAkCF,oBACpC;AAAA,IACE,GAAGb;AAAAA,IACH7D,QAAQ6D,qBAAqB7D,SAAS0E,kBAAkB9H;AAAAA,EAAAA,IAE1DiH,sBAEEgB,+BAA+BvE,iDAAgC;AAAA,IACnE/C,SAASH,SAASG;AAAAA,IAClBgD,aAAaoE;AAAAA,IACbnE,WAAW;AAAA,EAAA,CACZ,GACKsE,6BAA6BxE,iDAAgC;AAAA,IACjE/C,SAASH,SAASG;AAAAA,IAClBgD,aAAaqE;AAAAA,IACbpE,WAAW;AAAA,EAAA,CACZ;AAED,MAAI,CAACqE,gCAAgC,CAACC;AACpC,WAAO;AAGT,QAAMC,qBAAqB;AAAA,IACzBtH,QAAQoH;AAAAA,IACRnH,OAAOoH;AAAAA,EAAAA;AAGT,SAAO9H,iDAAoB;AAAA,IAEzBO,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN,WAAW8H;AAAAA,IAAAA;AAAAA,EACb,CACD,IACGA,qBACA;AACN,GC9HaC,gBAER5H,CAAAA,aAAa;AAChB,QAAMY,OAAOZ,SAASG,QAAQqC,MAAM,CAAC;AAErC,SAAO5B,OAAO;AAAA,IAACA;AAAAA,IAAMvB,MAAM,CAAC;AAAA,MAACM,MAAMiB,KAAKjB;AAAAA,IAAAA,CAAK;AAAA,EAAA,IAAKF;AACpD,GCJaoI,sBAER7H,CAAAA,aAAa;AAChB,QAAM8H,aAAa1H,6BAAAA,cAAcJ,QAAQ;AAEzC,SAAO8H,cAAc,CAACnH,mBAAYX,SAASG,SAAS2H,WAAWlH,IAAI,IAC/D;AAAA,IAACA,MAAMkH,WAAWlH;AAAAA,IAAMvB,MAAMyI,WAAWzI;AAAAA,EAAAA,IACzCI;AACN,GCTasI,uBAER/H,CAAAA,aAAa;AAChB,QAAMgI,aAAaC,6BAAAA,cAAcjI,QAAQ;AAEzC,SAAOgI,cAAc,CAACE,MAAAA,mBAAmBF,WAAWpH,IAAI,IACpD;AAAA,IAACA,MAAMoH,WAAWpH;AAAAA,IAAMvB,MAAM2I,WAAW3I;AAAAA,EAAAA,IACzCI;AACN,GCPa0I,oBAERnI,CAAAA,aAAa;AAChB,QAAMqG,iBAAiBrD,6BAAAA,kBAAkBhD,QAAQ;AAEjD,SAAOqG,kBAAkB+B,iBAAAA,YAAYpI,SAASG,SAASkG,eAAezF,IAAI,IACtE;AAAA,IAACA,MAAMyF,eAAezF;AAAAA,IAAMvB,MAAMgH,eAAehH;AAAAA,EAAAA,IACjDI;AACN,GCVa4I,eAERrI,CAAAA,aAAa;AAChB,QAAMY,OAAOZ,SAASG,QAAQqC,MAAMxC,SAASG,QAAQqC,MAAMhD,SAAS,CAAC,IACjEQ,SAASG,QAAQqC,MAAMxC,SAASG,QAAQqC,MAAMhD,SAAS,CAAC,IACxDC;AAEJ,SAAOmB,OAAO;AAAA,IAACA;AAAAA,IAAMvB,MAAM,CAAC;AAAA,MAACM,MAAMiB,KAAKjB;AAAAA,IAAAA,CAAK;AAAA,EAAA,IAAKF;AACpD,GCPa6I,eAERtI,CAAAA,aAAa;AAChB,QAAMS,oBAAoBV,qBAAqBC,QAAQ;AAEvD,MAAI,CAACS;AACH;AAGF,QAAM8C,QAAQvD,SAASoC,cAAcC,IAAI5B,kBAAkBG,KAAKjB,IAAI;AAEpE,MAAI4D,UAAU9D,UAAa8D,UAAUvD,SAASG,QAAQqC,MAAMhD,SAAS;AACnE;AAGF,QAAM+I,YAAYvI,SAASG,QAAQqC,MAAMjD,GAAGgE,QAAQ,CAAC;AAErD,SAAOgF,YACH;AAAA,IAAC3H,MAAM2H;AAAAA,IAAWlJ,MAAM,CAAC;AAAA,MAACM,MAAM4I,UAAU5I;AAAAA,IAAAA,CAAK;AAAA,EAAA,IAC/CF;AACN,GCpBa+I,mBAERxI,CAAAA,aAAa;AAChB,QAAMwB,sBAAsBJ,uBAAuBpB,QAAQ;AAE3D,MAAI,CAACwB;AACH;AAGF,QAAM+B,QAAQvD,SAASoC,cAAcC,IAAIb,oBAAoBZ,KAAKjB,IAAI;AAEtE,MAAI4D,UAAU9D,UAAa8D,UAAU;AACnC;AAGF,QAAMkF,gBAAgBzI,SAASG,QAAQqC,MAAMjD,GAAGgE,QAAQ,CAAC;AAEzD,SAAOkF,gBACH;AAAA,IAAC7H,MAAM6H;AAAAA,IAAepJ,MAAM,CAAC;AAAA,MAACM,MAAM8I,cAAc9I;AAAAA,IAAAA,CAAK;AAAA,EAAA,IACvDF;AACN,GClBaiJ,wBAER1I,CAAAA,aAAa;AAChB,MAAI,CAACA,SAASG,QAAQN;AACpB,WAAO,CAAA;AAGT,QAAMgG,qBAGD,CAAA,GAECxE,aAAaC,iBAAAA,uBAAuBtB,SAASG,QAAQN,SAAS,GAC9DI,WAAWC,iBAAAA,qBAAqBF,SAASG,QAAQN,SAAS,GAC1DiC,gBAAgBC,iBAAAA,8BAA8BV,UAAU,GACxDW,cAAcD,iBAAAA,8BAA8B9B,QAAQ;AAE1D,MAAI,CAAC6B,iBAAiB,CAACE;AACrB,WAAO6D;AAGT,QAAM1D,kBAAkBnC,SAASoC,cAAcC,IAAIP,aAAa,GAC1DQ,gBAAgBtC,SAASoC,cAAcC,IAAIL,WAAW;AAE5D,MAAIG,oBAAoB1C,UAAa6C,kBAAkB7C;AACrD,WAAOoG;AAGT,QAAMtD,cAAcvC,SAASG,QAAQqC,MAAMC,MACzCN,iBACAG,gBAAgB,CAClB;AAEA,aAAWK,SAASJ,aAAa;AAC/B,QAAII,MAAMhD,SAASmC,eAAe;AAKhC,UAJInB,OAAAA,YAAYX,SAASG,SAASwC,KAAK,KACrCkD,mBAAmB/C,KAAK;AAAA,QAAClC,MAAM+B;AAAAA,QAAOtD,MAAM,CAAC;AAAA,UAACM,MAAMgD,MAAMhD;AAAAA,QAAAA,CAAK;AAAA,MAAA,CAAE,GAG/DmC,kBAAkBE;AACpB;AAEF;AAAA,IACF;AAEA,QAAIW,MAAMhD,SAASqC,aAAa;AAC1BrB,aAAAA,YAAYX,SAASG,SAASwC,KAAK,KACrCkD,mBAAmB/C,KAAK;AAAA,QAAClC,MAAM+B;AAAAA,QAAOtD,MAAM,CAAC;AAAA,UAACM,MAAMgD,MAAMhD;AAAAA,QAAAA,CAAK;AAAA,MAAA,CAAE;AAGnE;AAAA,IACF;AAEIkG,uBAAmBrG,SAAS,KAC1BmB,mBAAYX,SAASG,SAASwC,KAAK,KACrCkD,mBAAmB/C,KAAK;AAAA,MAAClC,MAAM+B;AAAAA,MAAOtD,MAAM,CAAC;AAAA,QAACM,MAAMgD,MAAMhD;AAAAA,MAAAA,CAAK;AAAA,IAAA,CAAE;AAAA,EAGvE;AAEA,SAAOkG;AACT,GCpDa8C,sBACX3I,CAAAA,aACG;AACH,MAAI,CAACA,SAASG,QAAQN;AACpB,WAAOG,SAASG,QAAQN;AAG1B,QAAMwB,aAAaC,iBAAAA,uBAAuBtB,SAASG,QAAQN,SAAS,GAC9DI,WAAWC,sCAAqBF,SAASG,QAAQN,SAAS,GAE1DiC,gBAAgBC,iBAAAA,8BAA8BV,UAAU,GACxDuH,gBAAgB9H,iBAAAA,8BAA8BO,UAAU,GACxDW,cAAcD,iBAAAA,8BAA8B9B,QAAQ,GACpD4I,cAAc/H,iBAAAA,8BAA8Bb,QAAQ;AAE1D,MAAI,CAAC6B,iBAAiB,CAACE;AACrB,WAAOhC,SAASG,QAAQN;AAG1B,QAAMsC,kBAAkBnC,SAASoC,cAAcC,IAAIP,aAAa,GAC1DQ,gBAAgBtC,SAASoC,cAAcC,IAAIL,WAAW;AAE5D,MAAIG,oBAAoB1C,UAAa6C,kBAAkB7C;AACrD,WAAOO,SAASG,QAAQN;AAG1B,QAAM0C,cAAcvC,SAASG,QAAQqC,MAAMC,MACzCN,iBACAG,gBAAgB,CAClB;AAEA,MAAII,kBAAkB,IAClBoG,oBACAC,iBAAiB,IACjBC,kBACAC,eAAe,IACfC;AAIJ,aAAWvG,SAASJ;AAClB,QAAII,EAAAA,MAAMhD,SAASmC,kBACjBY,kBAAkB,IAGhB/B,mBAAYX,SAASG,SAASwC,KAAK,KACnCwG,0BAAAA,iBAAiBnJ,SAASG,SAASwC,KAAK,OAMvCD,mBAIA/B,OAAAA,YAAYX,SAASG,SAASwC,KAAK,GAIxC;AAAA,UACEA,MAAMhD,SAASqC,eACfmH,0BAAAA,iBAAiBnJ,SAASG,SAASwC,KAAK;AAExC;AAGF,iBAAW1B,SAAS0B,MAAMzB,UAAU;AAClC,YAAID,MAAMtB,SAASkJ,gBACb,CAAC1H,OAAAA,OAAOnB,SAASG,SAASc,KAAK,KAAKhB,SAAS2C,WAAW,IAAG;AAC7DoG,6BAAmBE,4BACf;AAAA,YACE7J,MAAM,CACJ;AAAA,cAACM,MAAMuJ,0BAA0BE;AAAAA,YAAAA,GACjC,YACA;AAAA,cAACzJ,MAAMuJ,0BAA0BzF,KAAK9D;AAAAA,YAAAA,CAAK;AAAA,YAE7CiD,QAAQsG,0BAA0BzF,KAAKZ,KAAKrD;AAAAA,UAAAA,IAE9CC,QAEJwJ,eAAe;AACf;AAAA,QACF;AAGF,YAAIF,gBAAgB;AAClB,gBAAMM,aACJlI,cAAOnB,SAASG,SAASc,KAAK,KAAK0B,MAAMzB,SAAS1B,WAAW;AAE/D,WACG2B,cAAOnB,SAASG,SAASc,KAAK,KAAKA,MAAM4B,KAAKrD,SAAS,KACxD6J,gBAEAP,qBAAqB;AAAA,YACnBzJ,MAAM,CAAC;AAAA,cAACM,MAAMgD,MAAMhD;AAAAA,YAAAA,GAAO,YAAY;AAAA,cAACA,MAAMsB,MAAMtB;AAAAA,YAAAA,CAAK;AAAA,YACzDiD,QAAQ;AAAA,UAAA,GAEVsG,4BAA4B;AAAA,YAACE,UAAUzG,MAAMhD;AAAAA,YAAM8D,MAAMxC;AAAAA,UAAAA,GACzD8H,iBAAiB;AAGnB;AAAA,QACF;AAEA,YAAI9H,MAAMtB,SAASiJ,eAAe;AAChC,cAAI,CAACzH,OAAAA,OAAOnB,SAASG,SAASc,KAAK,GAAG;AACpC8H,6BAAiB;AACjB;AAAA,UACF;AAEA,cAAI1H,WAAWuB,WAAW3B,MAAM4B,KAAKrD,QAAQ;AAC3CuJ,6BAAiB,IACjBG,4BACEjI,MAAM4B,KAAKrD,SAAS,IAChB;AAAA,cAAC4J,UAAUzG,MAAMhD;AAAAA,cAAM8D,MAAMxC;AAAAA,YAAAA,IAC7BiI;AACN;AAAA,UACF;AAAA,QACF;AAEAA,oCACE/H,OAAAA,OAAOnB,SAASG,SAASc,KAAK,KAAKA,MAAM4B,KAAKrD,SAAS,IACnD;AAAA,UAAC4J,UAAUzG,MAAMhD;AAAAA,UAAM8D,MAAMxC;AAAAA,QAAAA,IAC7BiI;AAAAA,MACR;AAEA,UAAIvG,MAAMhD,SAASqC;AACjB;AAAA,IAAA;AAIJ,QAAMsH,mBAAmBtJ,SAASG,QAAQN,UAAUU,WAChD;AAAA,IACEF,QAAQ4I,gBAAgBD,mBAAmBA,mBAAmB/I;AAAAA,IAC9DK,OAAOwI,sBAAsBzH;AAAAA,IAC7Bd,UAAU;AAAA,EAAA,IAEZ;AAAA,IACEF,QAAQyI,sBAAsBzH;AAAAA,IAC9Bf,OAAO2I,gBAAgBD,mBAAmBA,mBAAmB/I;AAAAA,EAAAA;AAGnE,MACEH,kDAAqB;AAAA,IAEnBK,SAAS;AAAA,MACP,GAAGH,SAASG;AAAAA,MACZN,WAAWyJ;AAAAA,IAAAA;AAAAA,EACb,CACD,GACD;AACA,UAAMjD,iBAAiBrD,6BAAAA,kBAAkB;AAAA,MACvC,GAAGhD;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAWyJ;AAAAA,MAAAA;AAAAA,IACb,CACD;AAED,QACEjD,kBACA,CAAC8C,0BAAAA,iBAAiBnJ,SAASG,SAASkG,eAAezF,IAAI;AAEvD,aAAO;AAAA,EAEX;AAEA,SAAO0I;AACT;ACzLO,SAASC,0BAA0BvJ,UAA0B;AAClE,QAAMgE,UAAShE,SAASG,QAAQ6D;AAGhC,UAFkBjB,aAAa/C,QAAQ,GAEpBwD,SAAS,IAAIE,OAC7BC,CAAAA,SACC,CAACK,QAAOD,WAAWE,IAAKC,CAAAA,cAAcA,UAAUC,IAAI,EAAEE,SAASV,IAAI,CACvE;AACF;ACAO,SAAS6F,mBACdC,YACAC,SASyB;AACzB,SAAQ1J,CAAAA,aAAa;AAGnB,SAFa0J,SAASC,QAAQ,YAEjB;AAOX,aANsBC,6BAAAA,iBAAiB5J,QAAQ,EAEPyF,QAAS9C,WAC/ChC,OAAAA,YAAYX,SAASG,SAASwC,KAAK,IAAKA,MAAM+C,YAAY,KAAM,CAAA,CAClE,EAEyB9B,KAAM+B,CAAAA,YAAYA,QAAQkE,UAAUJ,UAAU;AAIzE,UAAMK,oBADiB3E,kBAAkBnF,QAAQ,EACRyF,QAAS9C,CAAAA,UAChDhC,OAAAA,YAAYX,SAASG,SAASwC,MAAM/B,IAAI,IACnC+B,MAAM/B,KAAK8E,YAAY,CAAA,IACxB,CAAA,CACN,GACMF,oBAAoB+D,0BAA0BvJ,QAAQ;AAO5D,WANuB8J,kBAAkBpG,OACtCiC,CAAAA,YACCA,QAAQkE,UAAUJ,cAClBjE,kBAAkBnB,SAASsB,QAAQhG,IAAI,CAC3C,EAEsBH,SAAS;AAAA,EACjC;AACF;AChDO,SAASuK,oBAAoB/J,UAA0B;AAC5D,QAAMgE,UAAShE,SAASG,QAAQ6D,QAC1BgG,iBAAiBhK,SAASgK,gBAC1BC,YAAYlH,aAAa/C,QAAQ,GACjC+D,aAAaC,QAAOD,WAAWE,IAAKC,CAAAA,cAAcA,UAAUC,IAAI;AAMtE,MAAI+F,oBAJyBD,WAAWzG,SAAS,CAAA,GAAIE,OAAQC,CAAAA,SAC3DI,WAAWM,SAASV,IAAI,CAC1B;AAIA,aAAWO,aAAa8F;AAClBA,mBAAe9F,SAAS,MAAM,KAChCgG,mBAAmBA,iBAAiBxG,OACjCyG,qBAAoBA,oBAAoBjG,SAC3C,IACS8F,eAAe9F,SAAS,MAAM,OAClCgG,iBAAiB7F,SAASH,SAAS,KACtCgG,iBAAiBpH,KAAKoB,SAAS;AAKrC,SAAOgG;AACT;ACpBO,SAASE,kBAAkBlG,WAA4C;AAC5E,SAAQlE,CAAAA,aAAa;AACnB,QAAIJ,6BAAAA,oBAAoBI,QAAQ,GAAG;AACjC,YAAM6B,gBAAgBD,iBAAiB5B,QAAQ;AAE/C,aACE6B,cAAcrC,SAAS,KACvBqC,cAAciD,MAAOrB,CAAAA,SAASA,KAAK7C,KAAK4C,OAAOa,SAASH,SAAS,CAAC;AAAA,IAEtE;AAIA,WAFyB6F,oBAAoB/J,QAAQ,EAE7BqE,SAASH,SAAS;AAAA,EAC5C;AACF;ACjBO,SAASmG,iBAAiBrE,UAA2C;AAC1E,SAAQhG,CAAAA,aACiB4F,kBAAkB5F,QAAQ,MAEvBgG;AAE9B;ACNO,SAASsE,cAAcnE,OAAwC;AACpE,SAAQnG,CAAAA,aACciG,eAAejG,QAAQ,MAEpBmG;AAE3B;ACHO,SAASoE,kBAAkB5H,OAGN;AAC1B,SAAQ3C,CAAAA,aAAa;AACnB,QAAI,CAACA,SAASG,QAAQN,aAAa,CAACC,6BAAAA,qBAAqBE,QAAQ;AAC/D,aAAO;AAGT,UAAMoH,gBAAgBoD,0BAAAA,iBAAuB;AAAA,MAC3CrK,SAASH,SAASG;AAAAA,MAClBwC;AAAAA,IAAAA,CACD;AAED,WAAO6H,0BAAAA,uBACLxK,SAASG,QAAQN,UAAUS,OAC3B8G,aACF;AAAA,EACF;AACF;ACnBO,SAASqD,oBAAoB9H,OAGR;AAC1B,SAAQ3C,CAAAA,aAAa;AACnB,QAAI,CAACA,SAASG,QAAQN,aAAa,CAACC,6BAAAA,qBAAqBE,QAAQ;AAC/D,aAAO;AAGT,UAAM8G,kBAAkB0D,iBAAAA,mBAAyB;AAAA,MAC/CrK,SAASH,SAASG;AAAAA,MAClBwC;AAAAA,IAAAA,CACD;AAED,WAAO6H,0BAAAA,uBACLxK,SAASG,QAAQN,UAAUS,OAC3BwG,eACF;AAAA,EACF;AACF;AChBO,SAAS4D,sBACdC,OACyB;AACzB,SAAQ3K,CAAAA,aAAa;AACnB,QAAI,CAACA,SAASG,QAAQN;AACpB,aAAO;AAGT,UAAMI,WAAWC,iBAAAA,qBAAqBF,SAASG,QAAQN,SAAS,GAC1DmC,cAAcD,iBAAAA,8BAA8B9B,QAAQ,GACpD4I,cAAc/H,+CAA8Bb,QAAQ,GAEpD2K,gBAAgB7I,iBAAAA,8BAA8B4I,KAAK,GACnDE,gBAAgB/J,iBAAAA,8BAA8B6J,KAAK;AAEzD,QAAI,CAACC,iBAAiB,CAAC5I;AACrB,aAAO;AAGT,UAAM8I,kBAAkB9K,SAASoC,cAAcC,IAAIuI,aAAa,GAC1DtI,gBAAgBtC,SAASoC,cAAcC,IAAIL,WAAW;AAE5D,QAAI8I,oBAAoBrL,UAAa6C,kBAAkB7C;AACrD,aAAO;AAGT,QAAIqL,kBAAkBxI;AAEpB,aAAO;AAGT,QAAIwI,kBAAkBxI;AAEpB,aAAO;AAIT,UAAMyI,aAAa/K,SAASG,QAAQqC,MAAMjD,GAAGuL,eAAe;AAO5D,QALI,CAACC,cAKD,CAACpK,OAAAA,YAAYX,SAASG,SAAS4K,UAAU;AAI3C,aAAO;AAGT,QAAIC,iBACAC,eAEAC,aAAa;AAIjB,eAAWjK,SAAS8J,WAAW7J,UAAU;AAGvC,UAFAgK,cAEIjK,MAAMtB,SAASkL,iBAAiB5J,MAAMtB,SAASkJ;AACjD,eAAO8B,MAAM/H,SAAS3C,SAAS2C;AAWjC,UARI3B,MAAMtB,SAASkL,kBACjBG,kBAAkBE,aAGhBjK,MAAMtB,SAASkJ,gBACjBoC,gBAAgBC,aAGdF,oBAAoBvL,UAAawL,kBAAkBxL;AACrD;AAAA,IAEJ;AAEA,WAAIuL,oBAAoBvL,UAAawL,kBAAkBxL,SAC9C,KAGFuL,kBAAkBC;AAAAA,EAC3B;AACF;ACpFO,SAASE,uBACdR,OACyB;AACzB,SAAQ3K,CAAAA,aAAa;AACnB,QAAI,CAACA,SAASG,QAAQN;AACpB,aAAO;AAGT,UAAMwB,aAAaC,iBAAAA,uBAAuBtB,SAASG,QAAQN,SAAS,GAC9DiC,gBAAgBC,iBAAAA,8BAA8BV,UAAU,GACxDuH,gBAAgB9H,+CAA8BO,UAAU,GAExDuJ,gBAAgB7I,iBAAAA,8BAA8B4I,KAAK,GACnDE,gBAAgB/J,iBAAAA,8BAA8B6J,KAAK;AAEzD,QAAI,CAACC,iBAAiB,CAAC9I;AACrB,aAAO;AAGT,UAAMK,kBAAkBnC,SAASoC,cAAcC,IAAIP,aAAa,GAC1DgJ,kBAAkB9K,SAASoC,cAAcC,IAAIuI,aAAa;AAEhE,QAAIzI,oBAAoB1C,UAAaqL,oBAAoBrL;AACvD,aAAO;AAGT,QAAIqL,kBAAkB3I;AAEpB,aAAO;AAGT,QAAI2I,kBAAkB3I;AAEpB,aAAO;AAIT,UAAM4I,aAAa/K,SAASG,QAAQqC,MAAMjD,GAAGuL,eAAe;AAO5D,QALI,CAACC,cAKD,CAACpK,OAAAA,YAAYX,SAASG,SAAS4K,UAAU;AAI3C,aAAO;AAGT,QAAIC,iBACAI,iBAEAF,aAAa;AAIjB,eAAWjK,SAAS8J,WAAW7J,UAAU;AAGvC,UAFAgK,cAEIjK,MAAMtB,SAASkL,iBAAiB5J,MAAMtB,SAASiJ;AACjD,eAAO+B,MAAM/H,SAASvB,WAAWuB;AAWnC,UARI3B,MAAMtB,SAASkL,kBACjBG,kBAAkBE,aAGhBjK,MAAMtB,SAASiJ,kBACjBwC,kBAAkBF,aAGhBF,oBAAoBvL,UAAa2L,oBAAoB3L;AACvD;AAAA,IAEJ;AAEA,WAAIuL,oBAAoBvL,UAAa2L,oBAAoB3L,SAChD,KAGFuL,kBAAkBI;AAAAA,EAC3B;AACF;ACrFO,SAASC,uBACdxL,WACyB;AACzB,SAAQG,CAAAA,aAAa;AACnB,QAAI,CAACH,aAAa,CAACG,SAASG,QAAQN;AAClC,aAAO;AAGT,UAAM4B,sBAAsBH,6BAAAA,uBAAuB;AAAA,MAEjDnB,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN;AAAAA,MAAAA;AAAAA,IACF,CACD,GACKa,oBAAoBR,qBAAqB;AAAA,MAE7CC,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN;AAAAA,MAAAA;AAAAA,IACF,CACD,GAEKyL,8BAA8BhK,oDAAuBtB,QAAQ,GAC7DuL,4BAA4BrL,qBAAqBF,QAAQ;AAE/D,QACE,CAACyB,uBACD,CAACf,qBACD,CAAC4K,+BACD,CAACC;AAED,aAAO;AAGT,UAAMC,sCAAsCC,0BAAAA,uBAC1ChK,qBACA6J,2BACF,GACMI,kCAAkCD,0BAAAA,uBACtC/K,mBACA6K,yBACF;AAEA,QACEC,uCACAE;AAEA,aAAO;AAGT,UAAMC,4BACJR,uBAAuB1J,mBAAmB,EAAEzB,QAAQ,GAChD4L,2BACJlB,sBAAsBjJ,mBAAmB,EAAEzB,QAAQ,GAC/C6L,0BACJV,uBAAuBzK,iBAAiB,EAAEV,QAAQ,GAC9C8L,yBACJpB,sBAAsBhK,iBAAiB,EAAEV,QAAQ,GAE7C+L,qCAAqCZ,uBACzCG,2BACF,EAAE;AAAA,MACA,GAAGtL;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAW;AAAA,UACTQ,QAAQoB;AAAAA,UACRnB,OAAOmB;AAAAA,QAAAA;AAAAA,MACT;AAAA,IACF,CACD,GACKuK,oCAAoCtB,sBACxCY,2BACF,EAAE;AAAA,MACA,GAAGtL;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAW;AAAA,UACTQ,QAAQoB;AAAAA,UACRnB,OAAOmB;AAAAA,QAAAA;AAAAA,MACT;AAAA,IACF,CACD,GAEKwK,iCAAiCd,uBACrCI,yBACF,EAAE;AAAA,MACA,GAAGvL;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAW;AAAA,UACTQ,QAAQK;AAAAA,UACRJ,OAAOI;AAAAA,QAAAA;AAAAA,MACT;AAAA,IACF,CACD,GACKwL,gCAAgCxB,sBACpCa,yBACF,EAAE;AAAA,MACA,GAAGvL;AAAAA,MACHG,SAAS;AAAA,QACP,GAAGH,SAASG;AAAAA,QACZN,WAAW;AAAA,UACTQ,QAAQK;AAAAA,UACRJ,OAAOI;AAAAA,QAAAA;AAAAA,MACT;AAAA,IACF,CACD,GAEKyL,oCAAoCV,0BAAAA,uBACxChK,qBACA8J,yBACF,GACMa,oCAAoCX,0BAAAA,uBACxC/K,mBACA4K,2BACF;AAmBA,WAdE,CAACc,qCACD,CAACD,qCACD,CAACJ,sCACD,CAACC,qCACD,CAACC,kCACD,CAACC,iCAKCL,2BAA2B,CAACO,qCAI5BR,4BAA4B,CAACO,oCACxB,KAIP,CAACJ,sCACDC,qCACA,CAACC,kCACDC,gCAEO,CAACE,oCAIRL,sCACA,CAACC,qCACDC,kCACA,CAACC,gCAEM,CAACC,oCAIR,CAACP,4BACD,CAACD,6BACD,CAACG,0BACD,CAACD;AAAAA,EAML;AACF;AC5KO,MAAMQ,0BAAoDrM,CAAAA,aAAa;AAC5E,MAAI,CAACA,SAASG,QAAQN;AACpB,WAAO;AAGT,QAAMwB,aAAarB,SAASG,QAAQN,UAAUU,WAC1CP,SAASG,QAAQN,UAAUS,QAC3BN,SAASG,QAAQN,UAAUQ,QACzBJ,WAAWD,SAASG,QAAQN,UAAUU,WACxCP,SAASG,QAAQN,UAAUQ,SAC3BL,SAASG,QAAQN,UAAUS,OAEzBgM,aAAalL,uBAAuBpB,QAAQ,GAC5CuM,WAAWxM,qBAAqBC,QAAQ;AAE9C,MAAI,CAACsM,cAAc,CAACC;AAClB,WAAO;AAGT,QAAMC,uBAAuBhC,iBAAAA,mBAAyB;AAAA,IACpDrK,SAASH,SAASG;AAAAA,IAClBwC,OAAO2J;AAAAA,EAAAA,CACR,GACKG,mBAAmBjC,2CAAuB;AAAA,IAC9CrK,SAASH,SAASG;AAAAA,IAClBwC,OAAO4J;AAAAA,EAAAA,CACR;AAED,SACE/B,0BAAAA,uBAA6BgC,sBAAsBnL,UAAU,KAC7DmJ,0BAAAA,uBAA6BiC,kBAAkBxM,QAAQ;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}